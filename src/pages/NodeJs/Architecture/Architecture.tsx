import architecture from '../../../images/NodeJsImages/Architecture/architecture.png'
import VsCode from "../../../components/VsCode/VsCode.tsx";
import NavButtons from "../../../components/NavButtons/NavButtons.tsx";

type ArchitectureProps = {}
export default function Architecture(props: ArchitectureProps) {
  const {} = props

  return (
    <section className={'topic container'}>
      <h2>Архитектура Node.js: V8, libuv и Event Loop</h2>

      <p>
        <strong>Node.js</strong> — это среда выполнения JavaScript вне браузера, которая позволяет создавать серверные приложения. Основу Node.js составляют три ключевых компонента: <strong>движок V8</strong>, <strong>библиотека libuv</strong> и <strong>Event Loop</strong>. Разберём каждый подробно.
      </p>

      <h3>Движок V8: Что это и зачем</h3>
      <p>V8 — это высокопроизводительный движок JavaScript, разработанный компанией Google и используемый в браузере Chrome. Он отвечает за компиляцию и выполнение JavaScript-кода.</p>
      <p>V8 написан на языке C++. Его основная задача — превращать JavaScript в машинный код, который может выполняться процессором напрямую, без интерпретации. Это обеспечивает высокую скорость исполнения.</p>
      <p>В Node.js V8 запускает JavaScript-код и управляет памятью, сборкой мусора и оптимизацией выполнения.</p>

      <h3>libuv: Мост между JavaScript и ОС</h3>
      <p>libuv — это библиотека, написанная на C, которая предоставляет Node.js кроссплатформенный доступ к низкоуровневым функциям операционной системы, таким как файловая система, сеть, таймеры и асинхронный ввод-вывод.</p>
      <p>libuv обеспечивает абстракцию для работы с асинхронными операциями, скрывая особенности Windows, Linux и macOS под единый интерфейс.</p>
      <p>Без libuv Node.js не смог бы эффективно работать с операционной системой и обрабатывать большое количество одновременных операций ввода-вывода.</p>

      <h3>Event Loop в libuv: Как работает асинхронность</h3>
      <p>Event Loop — это главный механизм libuv, который управляет выполнением асинхронных задач в Node.js.</p>
      <p>Node.js — однопоточная платформа, то есть весь JavaScript-код выполняется в одном потоке. Чтобы не блокировать поток ожиданием медленных операций (например, чтения файлов или сетевых запросов), Event Loop ставит эти задачи в очередь и обрабатывает их по готовности.</p>
      <p>Event Loop циклично проверяет очередь событий и выполняет функции обратного вызова (колбеки) по мере их готовности.</p>
      <img
        className={'invert'}
        src={architecture}
        alt=""
        width=""
        height=""
        loading="lazy"
      />
      <h3>Как Event Loop работает с вводом-выводом (I/O)</h3>
      <p>Ввод-вывод (Input/Output, I/O) — это операции взаимодействия с внешним миром: чтение файлов, работа с сетью, база данных и т.д. Такие операции могут занять время, поэтому важно не блокировать основной поток.</p>
      <p>libuv запускает эти I/O операции в фоновом режиме (чаще всего с использованием потоков из внутреннего пула), а Event Loop ждёт их завершения, чтобы вызвать соответствующие колбеки.</p>

      <VsCode>{
        `// Пример асинхронного чтения файла в Node.js
import fs from "fs"

fs.readFile('file.txt', 'utf-8', (err, data) => {
  if (err) throw err;
  console.log('Данные файла:', data);
});

console.log('Этот код выполняется первым');`
      }</VsCode>
      <p>Здесь файл читается асинхронно: Node.js не ждёт окончания операции, а сразу идёт дальше, выводя в консоль сообщение. Когда чтение завершится, Event Loop вызовет колбек и выведет содержимое файла.</p>

      <h3>Структура Event Loop: фазы и обработка задач</h3>
      <p>Event Loop в libuv состоит из нескольких фаз, которые последовательно выполняются в цикле:</p>
      <ul>
        <li>
          <strong>Timers</strong> — выполнение колбеков, запланированных с помощью setTimeout и setInterval.
        </li>
        <li>
          <strong>Pending callbacks</strong> — выполнение колбеков завершившихся системных операций.
        </li>
        <li><strong>Idle, prepare</strong> — внутренние операции libuv.</li>
        <li><strong>Poll</strong> — ожидание новых событий ввода-вывода.</li>
        <li><strong>Check</strong> — выполнение колбеков setImmediate.</li>
        <li>
          <strong>Close callbacks</strong> — обработка закрытия ресурсов (например, сокетов).
        </li>
      </ul>
      <p>Такой порядок обеспечивает эффективное управление событиями и асинхронными операциями.</p>

      <h3>Языки и компоненты</h3>
      <p>Ключевые технологии Node.js написаны на следующих языках:</p>
      <ul>
        <li><strong>V8</strong> — C++.</li>
        <li><strong>Обвязка Node.js</strong> (API) — C++ и JavaScript.</li>
      </ul>
      <p>Такой выбор языков позволяет сочетать высокую производительность с удобством программирования на JavaScript.</p>

      <h3>Почему такая архитектура эффективна</h3>
      <p>Комбинация V8, libuv и Event Loop даёт Node.js уникальную способность обрабатывать тысячи одновременных соединений и операций ввода-вывода без создания множества потоков, которые потребляют много ресурсов.</p>
      <p>Это делает Node.js особенно подходящим для задач, где важна масштабируемость и высокая производительность при работе с сетью и файлами.</p>

      <h2>Итого</h2>
      <ul>
        <li>V8 — движок Google, написанный на C++, компилирует и выполняет JavaScript вне браузера.</li>
        <li>libuv — кроссплатформенная библиотека на C, абстрагирует доступ к системным функциям и обеспечивает асинхронный ввод-вывод.</li>
        <li>Event Loop — цикл libuv, управляет асинхронными операциями, не блокируя основной поток Node.js.</li>
        <li>Ввод-вывод в Node.js выполняется асинхронно с помощью libuv, что позволяет обрабатывать множество операций параллельно.</li>
        <li>Node.js написан на C, C++ и JavaScript, что обеспечивает баланс производительности и удобства разработки.</li>
        <li>Такая архитектура делает Node.js масштабируемым и эффективным для серверных приложений с высокой нагрузкой.</li>
      </ul>
      <NavButtons prev={'/nodeJs/Setup'} next={'/nodeJs/BlockingAndNonblockingIo'} />
    </section>
  )
}
