import VsCode from "../../../components/VsCode/VsCode.tsx";
import NavButtons from "../../../components/NavButtons/NavButtons.tsx";
export default function Setup() {

  return (
    <section className={'topic container'}>
      <h2>Настройка окружения для React</h2>
      <p>Для разработки React-приложений необходимо подготовить рабочее окружение с правильными инструментами. Основой служит Node.js, который предоставляет среду выполнения JavaScript и менеджер пакетов npm для установки зависимостей.</p>

      <h3>Установка Node.js</h3>
      <p>Node.js — это среда выполнения JavaScript, построенная на движке V8. Она необходима для работы инструментов сборки, менеджера пакетов и локального сервера разработки.</p>

      <p>Скачайте LTS-версию Node.js с официального сайта nodejs.org. LTS (Long Term Support) гарантирует стабильность и долгосрочную поддержку. После установки проверьте корректность через терминал:</p>

      <VsCode>{`node --version
npm --version`}</VsCode>

      <p>Если команды выводят номера версий — установка прошла успешно. Рекомендуется использовать Node.js версии 16 или выше для работы с современными инструментами React.</p>

      <h3>Create React App — быстрый старт</h3>
      <p>Create React App — официальный инструмент для создания React-проектов с готовой конфигурацией. Он настраивает Webpack, Babel, ESLint и другие инструменты без необходимости ручной конфигурации.</p>

      <VsCode>{`npx create-react-app my-app
cd my-app
npm start`}</VsCode>

      <p>Команда npx выполняет пакет без глобальной установки, создает проект с именем my-app и запускает локальный сервер разработки на порту 3000. Браузер автоматически откроет приложение с демонстрационной страницей.</p>

      <h3>Структура проекта</h3>
      <p>Create React App создает стандартную структуру файлов, оптимизированную для разработки React-приложений:</p>

      <VsCode>{`my-app/
├── public/
│   ├── index.html      # Основной HTML-файл
│   └── favicon.ico     # Иконка сайта
├── src/
│   ├── App.jsx          # Главный компонент
│   ├── App.css         # Стили главного компонента
│   ├── index.jsx        # Точка входа приложения
│   └── index.css       # Глобальные стили
├── package.json        # Описание проекта и зависимости
└── README.md          # Документация проекта`}</VsCode>

      <p>Файл src/index.jsx является точкой входа — именно здесь React подключается к DOM и рендерит главный компонент App в элемент с id="root" из public/index.html.</p>

      <h3>Альтернативы Create React App</h3>
      <p>Для более гибкого контроля над конфигурацией существуют альтернативные инструменты создания React-проектов:</p>

      <p><strong>Vite</strong> — современный сборщик с быстрой горячей перезагрузкой и оптимизированной сборкой:</p>

      <VsCode>{`npm create vite@latest my-react-app -- --template react
cd my-react-app
npm install
npm run dev`}</VsCode>

      <p><strong>Next.js</strong> — полноценный фреймворк для продакшен-приложений с серверным рендерингом:</p>

      <VsCode>{`npx create-next-app@latest my-next-app
cd my-next-app
npm run dev`}</VsCode>

      <p>Vite обеспечивает значительно более быструю разработку за счет ES-модулей, а Next.js подходит для сложных приложений с требованиями к SEO и производительности.</p>

      <h3>Необходимые расширения для редактора</h3>
      <p>Для эффективной разработки React рекомендуется настроить редактор кода с соответствующими расширениями. Для Visual Studio Code:</p>

      <p><strong>ES7+ React/Redux/React-Native snippets</strong> — предоставляет готовые шаблоны кода для быстрого создания компонентов и хуков.</p>

      <p><strong>Bracket Pair Colorizer</strong> — выделяет парные скобки разными цветами для лучшей читаемости JSX.</p>

      <p><strong>Auto Rename Tag</strong> — автоматически переименовывает закрывающий тег при изменении открывающего.</p>

      <p><strong>Prettier</strong> — автоматическое форматирование кода по единым правилам для всей команды.</p>

      <h3>Система управления версиями</h3>
      <p>Git является стандартом для контроля версий в React-проектах. Create React App автоматически инициализирует git-репозиторий и создает базовый .gitignore:</p>

      <VsCode>{`git add .
git commit -m "Initial commit"
git remote add origin https://github.com/username/my-app.git
git push -u origin main`}</VsCode>

      <p>Файл .gitignore уже настроен для исключения node_modules, файлов сборки и других служебных файлов из системы контроля версий.</p>

      <h3>Инструменты разработчика</h3>
      <p>React Developer Tools — расширение браузера для отладки React-компонентов. Оно позволяет просматривать дерево компонентов, их пропсы, состояние и производительность.</p>

      <p>Установите расширение для Chrome или Firefox из соответствующих магазинов расширений. После установки в инструментах разработчика появятся вкладки "Components" и "Profiler" для анализа React-приложений.</p>

      <h3>Настройка TypeScript</h3>
      <p>TypeScript обеспечивает статическую типизацию и улучшает разработку больших приложений. Create React App поддерживает TypeScript из коробки:</p>

      <VsCode>{`npx create-react-app my-app --template typescript`}</VsCode>

      <p>Для существующего проекта добавьте TypeScript:</p>

      <VsCode>{`npm install --save typescript @types/node @types/react @types/react-dom
# Переименуйте .js файлы в .tsx`}</VsCode>

      <p>TypeScript автоматически проверит типы при сборке и предоставит лучшую поддержку в редакторе с автодополнением и проверкой ошибок.</p>

      <h2>Итого</h2>
      <ul>
        <li>Node.js — обязательная основа для разработки React-приложений</li>
        <li>Create React App обеспечивает быстрый старт с готовой конфигурацией</li>
        <li>Vite и Next.js предлагают альтернативы для специфических потребностей</li>
        <li>Правильная настройка редактора значительно повышает продуктивность</li>
        <li>Git необходим для контроля версий и совместной разработки</li>
        <li>React Developer Tools упрощают отладку и анализ приложений</li>
        <li>TypeScript добавляет безопасность типов для больших проектов</li>
      </ul>
      <NavButtons prev={'/react/Intro'} next={'/react/Components'} />
    </section>
  )
}