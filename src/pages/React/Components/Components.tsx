import VsCode from "../../../components/VsCode/VsCode.tsx";
import NavButtons from "../../../components/NavButtons/NavButtons.tsx";

export default function Components() {

  return (
    <section className={'topic container'}>
      <h2>Что такое компоненты</h2>

      <h3>Компонент — это независимая часть интерфейса</h3>
      Компоненты позволяют разбить пользовательский интерфейс на изолированные и переиспользуемые блоки. Каждый компонент отвечает за свою собственную часть UI и может быть повторно использован в разных местах приложения.

      <h3>Зачем нужны компоненты</h3>
      Без компонентов код интерфейса быстро превращается в неуправляемый хаос. Вместо одного большого HTML-файла с кучей разметки — структура становится модульной. Это ускоряет разработку, упрощает поддержку и позволяет команде работать параллельно.

      <h3>Типы компонентов</h3>
      В современном фронтенде (например, в React) компоненты бывают двух видов:
      - **Функциональные** — обычные функции, которые возвращают JSX.
      - **Классовые** — компоненты, построенные на классах (в новых проектах почти не используются).

      На практике почти всегда используется функциональный подход.

      <h3>Простой пример компонента</h3>
      Компонент, который выводит заголовок:

      <VsCode>{`function Title() {
  return <h1>Привет, мир!</h1>
}
`}</VsCode>

      <h3>Компоненты могут принимать параметры (props)</h3>
      Это делает их гибкими. Например:

      <VsCode>{`function Title({ text }) {
  return <h1>{text}</h1>
}
`}</VsCode>

      Такой компонент можно использовать с разными значениями:

      <VsCode>{`<Title text="Главная страница" />
<Title text="О нас" />
`}</VsCode>

      <h3>Компоненты можно вкладывать друг в друга</h3>
      Интерфейс собирается как конструктор: один компонент может использовать внутри себя другие:

      <VsCode>{`function Page() {
  return (
    <div>
      <Header />
      <MainContent />
      <Footer />
    </div>
  )
}
`}</VsCode>
      <h3>Компонент должен возвращать один корневой элемент</h3>

      <p>В React и большинстве современных UI-фреймворков компонент обязан возвращать только один корневой тег. Это техническое требование: движок JSX не сможет обработать «разорванную» структуру.</p>

      <p>Например, так — ошибка:</p>

      <VsCode>{`function Example() {
  return (
    <h1>Привет</h1>
    <p>Это абзац</p>
  )
}
`}</VsCode>

      <p>А вот так — корректно:</p>

      <VsCode>{`function Example() {
  return (
    <div>
      <h1>Привет</h1>
      <p>Это абзац</p>
    </div>
  )
}
`}</VsCode>

      <p>Если не хотите лишней обёртки в DOM, можно использовать фрагмент:</p>

      <VsCode>{`function Example() {
  return (
    <>
      <h1>Привет</h1>
      <p>Это абзац</p>
    </>
  )
}
`}</VsCode>

      <p>Такой синтаксис делает структуру чистой, не добавляя лишние div’ы.</p>
      <h3>Компоненты помогают организовать код</h3>
      Когда каждый блок — это компонент, работать с проектом проще:
      - Один компонент — одна задача
      - Удобно искать, читать и тестировать
      - Переиспользуемость — вместо копипаста

      <h2>Итого</h2>
      <ul>
        <li>Компонент — это изолированный блок интерфейса.</li>
        <li>Они помогают структурировать UI и переиспользовать код.</li>
        <li>Функциональные компоненты — стандарт в современном фронтенде.</li>
        <li>Компоненты могут принимать параметры (props).</li>
        <li>Их можно вкладывать друг в друга, собирая интерфейс как лего.</li>
        <li>С компонентами код становится модульным и понятным.</li>
      </ul>
      <NavButtons
        prev={'/react/Setup'}
        next={'/react/Lifecycle'}
      />
    </section>
  )
}