import VsCode from "../../../components/VsCode/VsCode.tsx";
import NavButtons from "../../../components/NavButtons/NavButtons.tsx";

export default function Components() {
  return (
    <section className={'topic container'}>
        <h2>Что такое JSX?</h2>
        <p>
            JSX — это расширение синтаксиса JavaScript, которое позволяет описывать структуру интерфейса с помощью HTML-подобного кода прямо в JS-файлах.
        </p>

        <h3>Зачем он нужен</h3>
        <p>
            Благодаря JSX, вы пишете интерфейс декларативно и наглядно — так, как он должен выглядеть, а не как он должен строиться.
        </p>

        <h3>Как это работает</h3>
        <p>
            Код на JSX не исполняется напрямую браузером. Он преобразуется (чаще всего с помощью Babel) в обычный JavaScript. Например:
        </p>

        <VsCode>{`const element = <h1>Привет, React!</h1>;
`}</VsCode>

        <p>превращается в:</p>

        <VsCode>{`const element = React.createElement('h1', null, 'Привет, React!');
`}</VsCode>

        <h3>Особенности синтаксиса</h3>
        <ul>
            <li>В JSX нужно возвращать один корневой элемент — используйте обёртки, например <code>&lt;div&gt;</code> или фрагменты.</li>
            <li>Вместо <code>class</code> используйте <code>className</code>.</li>
            <li>Вставка JavaScript выражений происходит через <code>{`{}`}</code>.</li>
        </ul>

        <h3>Когда не нужен JSX</h3>
        <p>
            Вы можете писать React-приложения без JSX — с помощью <code>React.createElement</code>, но код будет громоздким и менее читаемым.
        </p>


      <h3>Что такое компоненты?</h3>

      <p>Компонент — это независимая часть интерфейса</p>
        <p>
            Компоненты позволяют разбить пользовательский интерфейс на изолированные и переиспользуемые блоки. Каждый компонент отвечает за свою собственную часть UI и может быть повторно использован в разных местах приложения.
        </p>
      <h3>Зачем нужны компоненты</h3>
        <p>
            Без компонентов код интерфейса быстро превращается в неуправляемый хаос. Вместо одного большого HTML-файла с кучей разметки — структура становится модульной. Это ускоряет разработку, упрощает поддержку и позволяет команде работать параллельно.
        </p>
      <h3>Типы компонентов</h3>
      <p>
          В современном фронтенде (например, в React) компоненты бывают двух видов:<br/>
          - Функциональные — обычные функции, которые возвращают JSX.<br/>
          - Классовые — компоненты, построенные на классах (в новых проектах почти не используются).
      </p>
        <p>
            На практике почти всегда используется функциональный подход.
        </p>
      <h3>Простой пример компонента</h3>
        <p>
            Компонент, который выводит заголовок:
        </p>
      <VsCode>{`function Title() {
  return <h1>Привет, мир!</h1>
}
`}</VsCode>

      <h3>Компоненты могут принимать параметры (props)</h3>
        <p>
            Это делает их гибкими. Например:
        </p>
      <VsCode>{`function Title({ text }) {
  return <h1>{text}</h1>
}
`}</VsCode>

        <p>
            Такой компонент можно использовать с разными значениями:
        </p>
      <VsCode>{`<Title text="Главная страница" />
<Title text="О нас" />
`}</VsCode>

      <h3>Компоненты можно вкладывать друг в друга</h3>
        <p>
            Интерфейс собирается как конструктор: один компонент может использовать внутри себя другие:
        </p>
      <VsCode>{`function Page() {
  return (
    <div>
      <Header />
      <MainContent />
      <Footer />
    </div>
  )
}
`}</VsCode>
      <h3>Компонент должен возвращать один корневой элемент</h3>

      <p>В React и большинстве современных UI-фреймворков компонент обязан возвращать только один корневой тег. Это техническое требование: движок JSX не сможет обработать «разорванную» структуру.</p>

      <p>Например, так — ошибка:</p>

      <VsCode>{`function Example() {
  return (
    <h1>Привет</h1>
    <p>Это абзац</p>
  )
}
`}</VsCode>

      <p>А вот так — корректно:</p>

      <VsCode>{`function Example() {
  return (
    <div>
      <h1>Привет</h1>
      <p>Это абзац</p>
    </div>
  )
}
`}</VsCode>

      <p>Если не хотите лишней обёртки в DOM, можно использовать фрагмент:</p>

      <VsCode>{`function Example() {
  return (
    <>
      <h1>Привет</h1>
      <p>Это абзац</p>
    </>
  )
}
`}</VsCode>

      <p>Такой синтаксис делает структуру чистой, не добавляя лишние div’ы.</p>
      <h3>Компоненты помогают организовать код</h3>
      <p>
          Когда каждый блок — это компонент, работать с проектом проще:<br />
          - Один компонент — одна задача<br />
          - Удобно искать, читать и тестировать<br />
          - Переиспользуемость — вместо копипаста
      </p>

        <h2>Итого</h2>
        <ul>
            <li>JSX — это способ писать UI прямо в JavaScript, используя HTML-подобный синтаксис.</li>
            <li>Перед выполнением преобразуется в обычные вызовы <code>React.createElement</code>.</li>
            <li>Компонент — это изолированный блок интерфейса.</li>
            <li>Функциональные компоненты — стандарт в современном фронтенде.</li>
            <li>Их можно вкладывать друг в друга, собирая интерфейс как лего.</li>
        </ul>
      <NavButtons
        prev={'/react/Setup'}
        next={'/react/Lifecycle'}
      />

    </section>
  )
}