import NavButtons from "../../../components/NavButtons/NavButtons.tsx";


export default function PageRequest() {
  

  return (
    <section className="topic container">
      <h2>Что происходит при запросе страницы?</h2>
      <p>Разберем каждый шаг:</p>
      <ol>
        <li>
          <strong>Пользователь вводит URL и нажимает Enter</strong><br />
          В адресной строке браузера вводится адрес, например, <code>https://example.com</code>. После нажатия Enter начинается процесс загрузки страницы.
        </li>

        <li>
          <strong>Парсинг URL</strong><br />
          Браузер разбирает URL на части:
          <ul>
            <li>Протокол: <code>https</code></li>
            <li>Домен (хост): <code>example.com</code></li>
            <li>Порт: по умолчанию <code>443</code> для HTTPS</li>
            <li>Путь: <code>/</code> (корень сайта)</li>
          </ul>
        </li>

        <li>
          <strong>Проверка кэша браузера</strong><br />
          Браузер проверяет, есть ли в кэше сохранённая версия страницы или её ресурсов, и не устарели ли они. Если кэш свежий — браузер использует его, иначе — продолжает загрузку.
        </li>

        <li>
          <strong>DNS-запрос (получение IP-адреса сервера)</strong><br />
          Чтобы найти сервер, браузер должен узнать IP-адрес домена:
          <ul>
            <li>Проверяется локальный DNS-кэш операционной системы и браузера.</li>
            <li>Если адрес не найден, браузер отправляет запрос к DNS-серверу провайдера.</li>
            <li>Если провайдер не знает — запрос идет дальше к корневым и доменным DNS-серверам.</li>
            <li>В итоге браузер получает IP-адрес сервера, например, <code>93.184.216.34</code>.
            </li>
          </ul>
        </li>

        <li>
          <strong>Установка TCP-соединения и TLS (для HTTPS)</strong><br />
          Теперь браузер устанавливает соединение с сервером:
          <ul>
            <li>Выполняется TCP рукопожатие (three-way handshake).</li>
            <li>Для HTTPS происходит TLS handshake — обмен ключами и настройка зашифрованного соединения.</li>
          </ul>
        </li>

        <li>
          <strong>Отправка HTTP-запроса</strong><br />
          Браузер формирует и отправляет запрос к серверу:
          <pre>{`GET / HTTP/1.1\nHost: example.com\nUser-Agent: Chrome/71.0\nAccept: text/html`}
      </pre>
          Здесь браузер передает информацию о нужном ресурсе, куки, заголовки и т.д.
        </li>

        <li>
          <strong>Обработка запроса сервером</strong><br />
          Сервер получает запрос, обрабатывает его (например, запускает backend-приложение), формирует ответ — HTML, CSS, JS, изображения.
        </li>

        <li>
          <strong>Получение ответа браузером</strong><br />
          Браузер получает ответ — сначала заголовки, потом тело (например, HTML-код).
        </li>

        <li>
          <strong>Парсинг HTML и запрос дополнительных ресурсов</strong><br />
          Браузер начинает разбирать HTML:
          <ul>
            <li>Находит ссылки на CSS, JS, картинки.</li>
            <li>Параллельно запрашивает их с сервера.</li>
          </ul>
        </li>

        <li>
          <strong>Рендеринг страницы</strong><br />
          Браузер строит DOM, CSSOM, выполняет JS, применяет стили и отображает страницу на экране.
        </li>
      </ol>

      <p>
        Вот так, шаг за шагом, от одного нажатия Enter происходит сложный и скоординированный процесс, который превращает адрес в браузере в полноценную веб-страницу.
      </p>
      <NavButtons prev={'/browser/Rendering'} next={'/browser/EventLoop'} />
    </section>
  )
}