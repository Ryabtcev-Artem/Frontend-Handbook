import VsCode from "../../../components/VsCode/VsCode.tsx";
import gitstorage from "../../../images/GitImages/Intro/gitstorage.jpg"
import NavButtons from "../../../components/NavButtons/NavButtons.tsx";
export default function Intro() {

  return (
    <section className={'topic container'}>
      <h2>Что такое Git</h2>

      <h3>Git — это система контроля версий</h3>

      <p>
        Git помогает следить за всеми изменениями в проекте. Представьте: вы добавили новую фичу — кажется, крутая идея. Но вдруг всё падает. Ошибки. Паника. Вы решаете: «Да ну его, хочу убрать эту фичу». Но за это время вы тронули десятки файлов. Как всё вернуть?
        Редактировать вручную — это как собирать рассыпанный пазл на ощупь. А с Git — просто нажимаете пару кнопок, и проект возвращается к предыдущему, стабильному состоянию. Надёжно, быстро и без боли.
      </p>

      <h3>В чём магия?</h3>
      <p>
        Обычное сохранение файлов — это как записывать текст поверх старого. Ошибся — перезаписал. Git же делает снимки всего проекта. Каждое изменение
        — это зафиксированная точка, к которой можно вернуться в любой момент. Как в игре: сохранился перед боссом, не прошёл — загрузился.
      </p>
      <p>
        И главное — каждое такое сохранение осмысленно. Вы сами решаете, когда "сделать снимок", и подписываете его коротким комментарием:
      </p>

      <VsCode>{`git commit -m "Добавил адаптив для мобильных устройств"`}</VsCode>

      <h3>Другие способы хранить истории проекта</h3>
      <p>
        Наверное вы можете подумать, что историю проекта можно хранить на диске или флешке. Однако флешку можно потерять, а диск может сгореть, и тогда все ваши файлы исчезнут. А Git гарантирует надежное хранение всех версий вашего проекта.
      </p>
      <p>
        Для примера, Git настолько надёжен, что разместил открытый код важнейших проектов (таких как исходный код Linux) в Арктике, на острове Шпицберген.
        Этим данным не угрожает даже ядерная война или активация электромагнитного оружия.
      </p>
      <img
        src={gitstorage}
        alt=""
        width=""
        height=""
        loading="lazy"
      />
      <h3>Почему фронтендеру без Git никуда</h3>
      <p>
        Вы будете не просто писать код, а работать в команде. Чинить баги. Делать фичи. Вносить изменения в одни и те же файлы с другими разработчиками.
      </p>
      <p>
        Без Git всё это быстро превращается в хаос. С Git — порядок: каждая задача в отдельной ветке, каждый коммит — как отметка в блокноте.
        Ломать можно без страха, потому что откат всегда под рукой.
      </p>

      <h3>Git ≠ GitHub</h3>
      <p>
        Многие путают эти 2 понятия, но важно понимать, что это разные вещи.
      </p>
      <p> <strong>Git</strong> — это программа у вас на компьютере.</p>
      <p>
        <strong>GitHub</strong> — это онлайн-сервис, где удобно хранить ваши проекты в облаке, делиться ими с другими и работать вместе. Вы используете Git локально,
        а GitHub — чтобы отправить туда ваш код, как бы «опубликовать» его или создать резервную копию.
      </p>
      <h3>Чего не стоит бояться</h3>
      <p>
        Команд не так уж много — основные запоминаются быстро. Конфликты при слиянии — решаемы. Потеря данных — почти невозможна, если вы коммитите.
        Git страхует. Даже если вы случайно удалите всё — история останется.
      </p>

      <h2>Итого</h2>
      <ul>
        <li>Git — надёжный хранитель всей истории вашего проекта. Как машина времени, только для кода.</li>
        <li>Сохраняет не просто файлы, а смысл изменений: кто, когда и зачем.</li>
        <li>Работает локально, но в паре с GitHub становится мощным командным инструментом.</li>
        <li>Без Git быстро теряется контроль. С Git — порядок, безопасность и уверенность.</li>
        <li>Git настолько серьёзен, что некоторые его данные хранят даже в Арктике.</li>
      </ul>
      <NavButtons prev={'/git'} next={'/git/config'} />
    </section>
  )
}
