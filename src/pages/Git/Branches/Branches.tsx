export default function Branches() {

  return (
    <section className={'topic container'}>
      <h2>Ветки в Git</h2>
      <p>
        Ветки в Git — это инструмент, который позволяет вам работать с разными версиями проекта параллельно. Представьте, что ваша основная ветка — это главная дорожка,
        по которой движется проект. Создавая новую ветку, вы фактически делаете ответвление этой дорожки, где можно экспериментировать, разрабатывать новую функциональность или исправлять ошибки, не затрагивая основную ветку.
      </p>

      <h3>Как устроены ветки в Git?</h3>
      <p>
        В Git ветка — это просто указатель (или «ссылка») на конкретный коммит. Когда вы создаёте ветку, вы создаёте новую ссылку на текущий коммит.
        По мере добавления новых коммитов эта ссылка будет сдвигаться вперёд. Благодаря такому подходу переключение между ветками — очень лёгкая и быстрая операция.
      </p>

      <h3>Что такое слияние (merge) и как оно работает?</h3>
      <p>
        Слияние — это процесс объединения изменений из одной ветки в другую. Предположим, вы создали ветку <code>feature</code> от <code>main</code> и добавили в ней новую функциональность.
        Когда вы закончите, вам нужно "слить" эти изменения обратно в <code>main</code>, чтобы они стали частью основного проекта.
      </p>
      <p>
        Git при слиянии смотрит на три вещи:
      </p>
      <ul>
        <li><strong>Base (база)</strong> — общий предок веток, точка, откуда они разошлись.</li>
        <li><strong>Current branch (текущая ветка)</strong> — ветка, в которую вы сливаете изменения (например, main).</li>
        <li><strong>Merge branch (сливаемая ветка)</strong> — ветка, из которой берутся изменения (например, feature).</li>
      </ul>
      <p>
        Git сравнивает изменения в ветках относительно общего предка (base) и объединяет их. Если изменения не конфликтуют — слияние происходит автоматически.
        Если же изменения затрагивают одни и те же участки кода — возникает конфликт, который придётся решать вручную.
      </p>

      <h3>Пример слияния</h3>
      <p>
        Представьте, что вы сделали коммит в <code>main</code>, потом создали ветку <code>feature</code> и изменили там файл <code>index.js</code>. За это время в <code>main</code> тоже изменили этот файл, но в другой части кода.
        При слиянии Git автоматически объединит изменения, потому что они не пересекаются. Если бы вы оба изменили одну и ту же строку — вам пришлось бы вручную выбрать правильный вариант.
      </p>

      <h3>Git merge vs rebase</h3>
      <p>
        Помимо <code>git merge</code>, есть ещё команда <code>git rebase</code>, которая тоже объединяет ветки, но делает это иначе:
      </p>
      <ul>
        <li><strong>merge</strong> создаёт новый коммит слияния, объединяя ветки и сохраняя их историю как есть.</li>
        <li><strong>rebase</strong> "переносит" коммиты из одной ветки поверх другой, переписывая историю, чтобы она выглядела как одна линейная цепочка.</li>
      </ul>
      <p>
        Merge удобен, когда важна полная история и все ветвления. Rebase делает историю чище и проще для чтения, но требует осторожности, особенно если ветка уже отправлена в общий репозиторий.
      </p>

      <h3>Итог</h3>
      <p>
        Ветки — это фундаментальный механизм Git, который позволяет вам организовать процесс разработки, работать над разными задачами параллельно и потом аккуратно объединять результаты. Понимание того, как устроены ветки и слияния, поможет вам эффективно управлять историей вашего проекта и избегать конфликтов.
      </p>
    </section>
  )
}
