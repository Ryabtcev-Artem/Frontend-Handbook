import physical from '../../../images/InternetImages/ModelOsi/physical.jpg'
import commutator from '../../../images/InternetImages/ModelOsi/commutator.png'
import conferention from '../../../images/InternetImages/ModelOsi/conferention.jpg'
import model from '../../../images/InternetImages/ModelOsi/model.png'
import NavButtons from "../../../components/NavButtons/NavButtons.tsx";



export default function OsiModel() {
  
  return (
    <section className="topic container">
      <h2>Модель OSI: 7 уровней, как работает интернет</h2>
      <div className="notecard">
        Данный урок является необязательным, так как модель OSI — это в первую очередь теоретическая концепция, описывающая процесс передачи данных в интернете. Для практического понимания она не обязательна, но может помочь расширить общий кругозор.
      </div>
      <p>
        Модель <strong>OSI (Open Systems Interconnection)</strong> — модель, описывающая взаимодействие сетевых устройств между собой. Это способ представить, как компьютеры обмениваются данными. Она делит этот процесс на <strong>7 уровней</strong>, чтобы было проще понять, кто за что отвечает.
      </p>

      <p>
        Представь себе: ты хочешь отправить другу фото по интернету. Фото должно пройти через множество этапов. Модель OSI описывает этот путь шаг за шагом.
      </p>

      <hr />

      <ol>
        <li>
          <strong>Физический уровень (Physical)</strong>
          <p>
            На первом уровне модели OSI происходит передача физических сигналов, токов, света или радио.
          </p>
          <p>
            На этом уровне мы оперируем кабелями, контактами в разъемах, кодированием единиц и нулей и т.д. Говоря проще, это уровень «железа»: кабели, разъёмы, антенны, передатчики и приёмники. Здесь решаются такие задачи, как: как закодировать 0 и 1, какой сигнал считать началом передачи, и с какой скоростью всё это передавать. Среди технологий здесь можно выделить Ethernet, Bluetooth, Wi-Fi.
          </p>
          <img
            src={physical}
            alt=""
            width=""
            height=""
            loading="lazy"
          />
          <p>
            Здесь биты «переводятся» в сигналы, которые можно передать по среде — будь то электрические импульсы, радиоволны или световые вспышки.
          </p>
        </li>
        <li>
          <strong>Канальный уровень (Data Link)</strong>
          <p>
            Канальный уровень отвечает за надёжную передачу данных между двумя соседними устройствами — например, от компьютера до роутера. Он работает уже с битами, полученными от физического уровня, и собирает их в более крупные блоки — <strong>кадры (frames)</strong>.
          </p>
          <p>
            В каждом кадре указывается служебная информация: например, <strong>MAC-адрес отправителя и получателя</strong>, контрольная сумма для обнаружения ошибок и другие данные. Пример MAC-адреса: <code>00:1A:2B:3C:4D:5E</code>.
          </p>
          <p>
            Среди технологий и устройств, работающих на этом уровне: <strong>Ethernet</strong>, <strong>Wi-Fi (частично)</strong>, <strong>коммутаторы (switches)</strong> и <strong>мосты (bridges)</strong>. В отличие от маршрутизаторов, которые работают на сетевом уровне, коммутаторы оперируют MAC-адресами и передают кадры внутри одной локальной сети.
          </p>
        </li>
        <figure>
          <img
            src={commutator}
            alt=""
            width=""
            height=""
            loading="lazy"
          />
          <figcaption><em>Принцип работы коммутатора</em></figcaption>
        </figure>
        <li>
          <strong>Сетевой уровень (Network)</strong>
          <p>
            Этот уровень отвечает за то, как данные находят путь от отправителя к получателю через разные сети. Основной протокол здесь — <strong>IP</strong> (Internet Protocol), который управляет адресацией и маршрутизацией.
          </p>
          <p>
            <strong>Маршрутизаторы</strong> — устройства, которые работают именно на этом уровне: они анализируют IP-адреса и решают, по каким сетям и узлам отправить пакет, чтобы он достиг нужного адресата.
          </p>
          <p>
            Представьте, что вы отправляете письмо, и этот уровень — как почта, которая выбирает, через какие города, сортировки и маршруты оно должно пройти, чтобы попасть к адресату быстро и правильно.
          </p>
          <p>
            К технологиям сетевого уровня относятся не только IPv4 и IPv6, но и протоколы маршрутизации (например, OSPF (Open Shortest Path First), BGP (Border Gateway Protocol)), которые помогают маршрутизаторам обмениваться информацией о наилучших путях.
          </p>
        </li>
        <li>
          <strong>Транспортный уровень (Transport)</strong>
          <p>
            Как можно понять из названия, этот уровень отвечает за передачу данных между приложениями. Он разбивает информацию на части, следит за порядком их доставки и гарантирует, что данные не потеряются.
          </p>
          <p>
            Главные 2 рок-звезды здесь — протоколы <strong>TCP</strong> и <strong>UDP</strong>.
          </p>
          <ul>
            <li>
              <strong>TCP (Transmission Control Protocol)</strong> — надёжный и медленный, проверяет, что все данные дошли, и если что-то потерялось — отправляет заново. Например, так работает <strong>Gmail</strong> или загрузка файлов: важна точность, а не скорость.
            </li>
            <li>
              <strong>UDP (User Datagram Protocol)</strong> — быстрый и простой, не гарантирует доставку, зато отлично подходит для онлайн-игр и стриминга. Если потеряется пара кадров, это не критично и не нарушит работу приложения.
            </li>
          </ul>
        </li>

        <li>
          <strong>Сеансовый уровень (Session)</strong>
          <p>
            Перед тем как начать передавать данные, приложения устанавливают сессию — как рукопожатие. Это соединение продолжается, пока идёт обмен. Например, вы подключаетесь к видеозвонку — сеансовый уровень открывает «сессию» и следит, чтобы соединение не оборвалось.
          </p>
          <p>
            Если оно всё же прерывается — он может попытаться восстановить его.
          </p>
        </li>
        <img
          src={conferention}
          alt=""
          width=""
          height=""
          loading="lazy"
        />
        <li>
          <strong>Уровень представления (Presentation)</strong>
          <p>
            Этот уровень отвечает за то, <strong>в каком виде данные передаются</strong>. Он делает информацию понятной для получателя — независимо от того, с какого устройства или операционной системы она пришла.
          </p>

          <p>
            Представьте, что один компьютер отправляет текст в <strong>UTF-8</strong>, а другой понимает только <strong>UTF-16</strong>. Уровень представления занимается переводом — как профессиональный синхронный переводчик.
          </p>

          <p>
            Здесь же происходят:
            <ul>
              <li>
                <strong>Сжатие данных</strong> — чтобы уменьшить объём (например, ZIP, MP3, JPEG);
              </li>
              <li><strong>Шифрование</strong> — чтобы защитить данные (TLS);
              </li>
              <li>
                <strong>Кодирование</strong> — например, преобразование аудио и видео с помощью кодеков (H.264, Opus).
              </li>
            </ul>
          </p>

          <p>
            То есть этот уровень — как упаковщик и охранник: он сжимает, шифрует, кодирует данные и передаёт дальше по сети.
          </p>
          <p>
            Этот уровень отвечает за «понимание форматов»: преобразует данные в нужный вид — например, сжимает фото (JPEG), шифрует (TLS), или преобразует текст в нужную кодировку (UTF-8).
          </p>
          <p>
            Он как переводчик между приложением и сетью: делает данные понятными и безопасными.
          </p>
        </li>

        <li>
          <strong>Прикладной уровень (Application)</strong>
          <p>
            Это то, что вы видите и с чем работаете напрямую: сайты, мессенджеры, почтовые клиенты.
            Здесь используются такие протоколы, как <strong>HTTP, HTTPS, FTP (File Transfer Protocol), SMTP (Simple Mail Transfer Protocol)</strong>.
          </p>
          <p>
            На этом уровне происходит взаимодействие между программами и пользователями — через интерфейсы, веб-браузеры, приложения.
          </p>
        </li>
      </ol>
      <hr />
      <h3>Как это работает вместе?</h3>
      <p>
        Когда вы отправляете сообщение, данные проходят все 7 уровней снизу вверх — начиная с физического уровня, где биты передаются физически. Каждый уровень добавляет к этим данным свою «обёртку» с важной информацией. Этот процесс называется <strong>инкапсуляция</strong>. На стороне получателя происходит обратный процесс — данные <strong>декапсулируются</strong>, то есть слои поочерёдно снимают свои «обёртки», пока информация не станет понятной приложению получателя.
      </p>
      <p>Представьте, что вы отправляете посылку.
        Внутри — ваше письмо (данные).
        Курьер упаковывает письмо в конверт, на котором указывает адрес отправителя и получателя.
        Почта кладёт конверт в коробку с дополнительными метками для маршрутизации.
        Каждая следующая служба упаковывает посылку всё дальше, добавляя нужные этикетки и инструкции. Так же данные «заворачиваются» в заголовки и другую служебную информацию на каждом уровне.
      </p>
      <p>Когда посылка приходит к получателю, происходит обратный процесс.
        Сначала получатель снимает верхнюю коробку.
        Потом открывает конверт...
        В итоге доходит до письма — самой полезной информации.
        Так и в сети: каждый уровень снимает свою «обёртку», чтобы в итоге получить нужные данные.
      </p>
      <p>
        Каждый уровень решает свою задачу и взаимодействует только с соседними. Это делает систему гибкой и понятной.
      </p>
      <figure>
        <img
          src={model}
          alt=""
          width=""
          height=""
          loading="lazy"
        />
        <figcaption><em>Модель OSI</em></figcaption>
      </figure>
      <h2>Итого</h2>
      <p>
        Модель OSI — это теоретическая модель, которая помогает понять, как устроена передача данных. В реальности чаще применяют упрощённую модель TCP/IP, но OSI отлично помогает разобраться, что и где происходит.
      </p>
      <NavButtons
        prev={'/internet'}
        next={'/internet/ModelTcpIp'}
      />
    </section>
  )
}
