import VsCode from "../../../components/VsCode/VsCode.tsx"
import Test from "../../../components/Test/Test.tsx";
import NavButtons from "../../../components/NavButtons/NavButtons.tsx";



export default function Arrays() {
  

  return (
    <section className={'topic container'}>
      <h2>–ú–µ—Ç–æ–¥—ã –º–∞—Å—Å–∏–≤–æ–≤ –≤ JavaScript</h2>

      <p>–ú–∞—Å—Å–∏–≤—ã ‚Äî —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∏ —Ä—è–¥–æ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö.</p>

      <h3>–ò—Ç–µ—Ä–∏—Ä—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã</h3>

      <p><b>forEach</b> ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–µ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤.
      </p>
      <VsCode>{`[1, 2, 3].forEach(n => console.log(n));`}</VsCode>

      <p>
        <b>map</b> ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤:
      </p>
      <VsCode>{`const doubled = [1, 2, 3].map(n => n * 2); // [2, 4, 6]`}</VsCode>

      <p>
        <b>filter</b> ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ç–æ–ª—å–∫–æ —Å —Ç–µ–º–∏, –∫—Ç–æ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É:
      </p>
      <VsCode>{`const evens = [1, 2, 3, 4].filter(n => n % 2 === 0); // [2, 4]`}</VsCode>

      <p><b>reduce</b> ‚Äî –∞–∫–∫—É–º—É–ª–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–æ—Ö–æ–¥—è –ø–æ –º–∞—Å—Å–∏–≤—É:</p>
      <VsCode>{`const sum = [1, 2, 3, 4].reduce((acc, n) => acc + n, 0); // 10`}</VsCode>

      <p>
        <b>some</b> –∏ <b>every</b> –ø—Ä–æ–≤–µ—Ä—è—é—Ç, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —É—Å–ª–æ–≤–∏—é:
      </p>
      <VsCode>{`[1, 2, 3].some(n => n > 2);  // true
[1, 2, 3].every(n => n > 0); // true`}</VsCode>

      <h3>–ò–∑–º–µ–Ω—è—é—â–∏–µ –º–µ—Ç–æ–¥—ã (–º—É—Ç–∏—Ä—É—é—Ç –º–∞—Å—Å–∏–≤)</h3>

      <p><b>push / pop</b> ‚Äî –¥–æ–±–∞–≤–ª—è—é—Ç –∏ —É–¥–∞–ª—è—é—Ç —Å –∫–æ–Ω—Ü–∞:</p>
      <VsCode>{`const arr = [1, 2];
arr.push(3); // arr = [1, 2, 3]
arr.pop();   // arr = [1, 2]`}</VsCode>

      <p><b>shift / unshift</b> ‚Äî —Ä–∞–±–æ—Ç–∞—é—Ç —Å –Ω–∞—á–∞–ª–æ–º:</p>
      <VsCode>{`arr.unshift(0); // [0, 1, 2]
arr.shift();   // [1, 2]`}</VsCode>

      <p><b>splice</b> ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π: —É–¥–∞–ª—è–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ—Ç:</p>
      <VsCode>{`const nums = [1, 2, 3, 4];
nums.splice(1, 2, 'a', 'b'); // [1, 'a', 'b', 4]`}</VsCode>

      <h3>–ù–µ–º—É—Ç–∏—Ä—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã</h3>

      <p><b>slice</b> ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–∑ –º–∞—Å—Å–∏–≤–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ä–∏–≥–∏–Ω–∞–ª–∞:</p>
      <VsCode>{`const part = [1, 2, 3, 4].slice(1, 3); // [2, 3]`}</VsCode>

      <p><b>concat</b> ‚Äî –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –º–∞—Å—Å–∏–≤—ã:</p>
      <VsCode>{`[1, 2].concat([3, 4]); // [1, 2, 3, 4]`}</VsCode>

      <p><b>includes</b> ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞:</p>
      <VsCode>{`[1, 2, 3].includes(2); // true`}</VsCode>

      <h3>–ü–æ–∏—Å–∫</h3>

      <p><b>find</b> ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–¥ —É—Å–ª–æ–≤–∏–µ:</p>
      <VsCode>{`[1, 2, 3].find(n => n > 1); // 2`}</VsCode>

      <p><b>indexOf</b> / <b>lastIndexOf</b> ‚Äî –Ω–∞—Ö–æ–¥—è—Ç –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞:</p>
      <VsCode>{`['a', 'b', 'a'].indexOf('a');      // 0
['a', 'b', 'a'].lastIndexOf('a'); // 2`}</VsCode>

      <h3>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</h3>

      <p><b>sort</b> ‚Äî —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞ –º–µ—Å—Ç–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏), –º—É—Ç–∏—Ä—É–µ—Ç:</p>
      <VsCode>{`[3, 1, 10].sort(); // [1, 10, 3] ‚Äî —Å—Ç—Ä–æ–∫–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
[3, 1, 10].sort((a, b) => a - b); // [1, 3, 10] ‚Äî —á–∏—Å–ª–æ–≤–∞—è`}</VsCode>

      <p><b>reverse</b> ‚Äî –º–µ–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫, –º—É—Ç–∏—Ä—É–µ—Ç:</p>
      <VsCode>{`[1, 2, 3].reverse(); // [3, 2, 1]`}</VsCode>

      <p><b>join</b> ‚Äî –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É, –Ω–µ –º—É—Ç–∏—Ä—É–µ—Ç:</p>
      <VsCode>{`[1, 2, 3].join('-'); // '1-2-3'`}</VsCode>

      <h3>üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏</h3>
      <ul>
        <li>–ú–µ—Ç–æ–¥—ã –≤—Ä–æ–¥–µ <code>map</code>, <code>filter</code>, <code>slice</code> –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤.
        </li>
        <li>–ú–µ—Ç–æ–¥—ã <code>push</code>, <code>pop</code>, <code>splice</code>, <code>sort</code> ‚Äî –∏–∑–º–µ–Ω—è—é—Ç.
        </li>
        <li>
          <code>length</code> ‚Äî –Ω–µ –º–µ—Ç–æ–¥, –Ω–æ –≤–∞–∂–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ: –æ–±—Ä–µ–∑–∫–∞ –º–∞—Å—Å–∏–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ–≥–æ.
        </li>
      </ul>

      <h2>–ò—Ç–æ–≥–æ</h2>
      <ul>
        <li>–ú–∞—Å—Å–∏–≤—ã –æ–±–ª–∞–¥–∞—é—Ç –±–æ–≥–∞—Ç—ã–º –Ω–∞–±–æ—Ä–æ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤.</li>
        <li>–í–∞–∂–Ω–æ —Ä–∞–∑–ª–∏—á–∞—Ç—å –º—É—Ç–∏—Ä—É—é—â–∏–µ –∏ –Ω–µ–º—É—Ç–∏—Ä—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã.</li>
        <li>–ú–µ—Ç–æ–¥—ã —É–ø—Ä–æ—â–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, –ø–æ–∏—Å–∫ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö.</li>
      </ul>
      <NavButtons prev={'/js/MapAndSet'} next={'/js/MapAndSet'} />
      <Test allTasks={[
        {
          question: "–ß—Ç–æ –≤–µ—Ä–Ω—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥?",
          code: `[1, 2, 3].map(n => n * 2).filter(n => n > 3)`,
          variants: [
            "[2, 4, 6]",
            "[4, 6]",
            "[1, 2, 3]",
            "[6]"
          ],
          explanations: [
            "map —Å–æ–∑–¥–∞—Å—Ç [2,4,6], –Ω–æ filter –æ—Ç–±–µ—Ä—ë—Ç —Ç–æ–ª—å–∫–æ >3, –∑–Ω–∞—á–∏—Ç –Ω–µ –≤–µ—Å—å –º–∞—Å—Å–∏–≤.",
            "map —Å–æ–∑–¥–∞—Å—Ç [2,4,6], filter –æ—Å—Ç–∞–≤–∏—Ç —Ç–æ–ª—å–∫–æ 4 –∏ 6 ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
            "–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è, –∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è.",
            "–í –º–∞—Å—Å–∏–≤–µ 6 ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ >3, –Ω–æ 4 —Ç–æ–∂–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –∑–Ω–∞—á–∏—Ç –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª–Ω—ã–π."
          ],
          correct: 1,
          isCode: true,
        },
        {
          question: "–ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥ forEach –æ—Ç map?",
          variants: [
            "forEach –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤, map –Ω–µ—Ç",
            "forEach –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, map –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç",
            "map –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤, forEach –Ω–µ—Ç",
            "–û–Ω–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã"
          ],
          explanations: [
            "forEach –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –º–∞—Å—Å–∏–≤ —Å–∞–º –ø–æ —Å–µ–±–µ, –∞ –ª–∏—à—å –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç.",
            "forEach –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç undefined, map ‚Äî –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.",
            "map –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤, –∞ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π.",
            "–ú–µ—Ç–æ–¥—ã –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."
          ],
          correct: 1,
          isCode: false,
        },
        {
          question: "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞?",
          code: `const arr = [1, 2, 3];
arr.splice(1, 1, 'a', 'b');`,
          variants: [
            "arr —Å—Ç–∞–Ω–µ—Ç [1, 'a', 'b', 3]",
            "arr —Å—Ç–∞–Ω–µ—Ç ['a', 'b', 3]",
            "arr —Å—Ç–∞–Ω–µ—Ç [1, 2, 3, 'a', 'b']",
            "arr —Å—Ç–∞–Ω–µ—Ç [1, 2, 3]"
          ],
          explanations: [
            "splice —É–¥–∞–ª—è–µ—Ç 1 —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–∞ 1 (—á–∏—Å–ª–æ 2) –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç 'a','b' ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–µ–Ω.",
            "splice –Ω–µ —É–¥–∞–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —Ç–æ–ª—å–∫–æ —Å –ø–æ–∑–∏—Ü–∏–∏ 1.",
            "splice –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ–Ω–µ—Ü, –∞ –∑–∞–º–µ–Ω—è–µ—Ç –≤–Ω—É—Ç—Ä–∏.",
            "–ú–∞—Å—Å–∏–≤ –∏–∑–º–µ–Ω–∏—Ç—Å—è, –∞ –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º."
          ],
          correct: 0,
          isCode: true,
        },
        {
          question: "–ß—Ç–æ –≤–µ—Ä–Ω—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥?",
          code: `[1, 2, 3, 4].reduce((acc, n) => acc + n, 0)`,
          variants: [
            "10",
            "1234",
            "[1, 2, 3, 4]",
            "undefined"
          ],
          explanations: [
            "reduce —Å—É–º–º–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 0 ‚Äî —Å—É–º–º–∞ 10.",
            "–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞.",
            "reduce –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ –º–∞—Å—Å–∏–≤, –∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä.",
            "–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ, –Ω–µ undefined."
          ],
          correct: 0,
          isCode: true,
        },
        {
          question: "–ö–∞–∫–∏–º –º–µ—Ç–æ–¥–æ–º –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ *–≤—Å–µ* —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç —É—Å–ª–æ–≤–∏—é?",
          variants: [
            "some",
            "every",
            "filter",
            "map"
          ],
          explanations: [
            "some –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç.",
            "every –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç —É—Å–ª–æ–≤–∏—é.",
            "filter –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤, –Ω–µ –±—É–ª–µ–≤–æ.",
            "map —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç."
          ],
          correct: 1,
          isCode: false,
        },
        {
          question: "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —Å –º–∞—Å—Å–∏–≤–æ–º –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞ push?",
          variants: [
            "–î–æ–±–∞–≤–∏—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞",
            "–î–æ–±–∞–≤–∏—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞",
            "–£–¥–∞–ª–∏—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞",
            "–°–æ–∑–¥–∞—Å—Ç—Å—è –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤"
          ],
          explanations: [
            "push –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü, –∞ –Ω–µ –≤ –Ω–∞—á–∞–ª–æ.",
            "push –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–Ω–Ω–æ –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞.",
            "pop —É–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, –∞ –Ω–µ push.",
            "push –º—É—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Å—Å–∏–≤, –Ω–æ–≤—ã–π –Ω–µ —Å–æ–∑–¥–∞—ë—Ç."
          ],
          correct: 1,
          isCode: false,
        },
        {
          question: "–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞?",
          variants: [
            "indexOf",
            "lastIndexOf",
            "findIndex",
            "find"
          ],
          explanations: [
            "indexOf –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è.",
            "lastIndexOf –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞.",
            "findIndex –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–µ–≥–æ —É—Å–ª–æ–≤–∏—é.",
            "find –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç, –∞ –Ω–µ –∏–Ω–¥–µ–∫—Å."
          ],
          correct: 1,
          isCode: false,
        },
        {
          question: "–ß—Ç–æ –≤–µ—Ä–Ω—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥?",
          code: `[1, 2, 3].some(n => n > 3)`,
          variants: [
            "true",
            "false",
            "undefined",
            "1"
          ],
          explanations: [
            "–ù–∏ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –±–æ–ª—å—à–µ 3, some –≤–µ—Ä–Ω—ë—Ç false.",
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî false, —Ç.–∫. —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.",
            "some –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—É–ª–µ–≤–æ, –∞ –Ω–µ undefined.",
            "some –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ."
          ],
          correct: 1,
          isCode: true,
        },
        {
          question: "–ß–µ–º –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥ slice –æ—Ç splice?",
          variants: [
            "slice –º—É—Ç–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤, splice –Ω–µ—Ç",
            "splice –º—É—Ç–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤, slice –Ω–µ—Ç",
            "–û–±–∞ –º—É—Ç–∏—Ä—É—é—Ç –º–∞—Å—Å–∏–≤",
            "–û–±–∞ –Ω–µ –º—É—Ç–∏—Ä—É—é—Ç –º–∞—Å—Å–∏–≤"
          ],
          explanations: [
            "slice –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ä–µ–∑.",
            "splice –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤, —É–¥–∞–ª—è—è/–¥–æ–±–∞–≤–ª—è—è —ç–ª–µ–º–µ–Ω—Ç—ã.",
            "–¢–æ–ª—å–∫–æ splice –º—É—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤.",
            "slice –Ω–µ –º—É—Ç–∏—Ä—É–µ—Ç, –∞ splice –º—É—Ç–∏—Ä—É–µ—Ç."
          ],
          correct: 1,
          isCode: false,
        },
        {
          question: "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–µ—Ç–æ–¥ concat?",
          variants: [
            "–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ –≤ –Ω–æ–≤—ã–π, –Ω–µ –∏–∑–º–µ–Ω—è—è –∏—Å—Ö–æ–¥–Ω—ã–µ",
            "–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω–µ—Ü –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞",
            "–£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞",
            "–°–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞"
          ],
          explanations: [
            "concat –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –æ–±—ä–µ–¥–∏–Ω—è—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ.",
            "concat –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã, –∞ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π.",
            "concat –Ω–µ —É–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã.",
            "concat –Ω–µ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤—ã."
          ],
          correct: 0,
          isCode: false,
        },
        {
          question: "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç –∫–æ–¥?",
          code: `[3, 1, 10].sort()`,
          variants: [
            "[1, 10, 3]",
            "[3, 1, 10]",
            "[3, 10, 1]",
            "[10, 3, 1]"
          ],
          explanations: [
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é sort —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏, –ø–æ—ç—Ç–æ–º—É '10' –∏–¥—ë—Ç –ø–æ—Å–ª–µ '1', –Ω–æ –¥–æ '3'.",
            "–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.",
            "–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Ä—è–¥–∫—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º.",
            "–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Ä—è–¥–∫—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º."
          ],
          correct: 0,
          isCode: true,
        },
        {
          question: "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É '1-2-3' –∏–∑ –º–∞—Å—Å–∏–≤–∞ [1,2,3]?",
          variants: [
            "[1,2,3].join('-')",
            "[1,2,3].toString()",
            "[1,2,3].concat('-')",
            "[1,2,3].map(String)"
          ],
          explanations: [
            "join –æ–±—ä–µ–¥–∏–Ω–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º.",
            "toString –≤–µ—Ä–Ω—ë—Ç '1,2,3', –∞ –Ω–µ —Å –¥–µ—Ñ–∏—Å–∞–º–∏.",
            "concat –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º.",
            "map –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–æ –Ω–µ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏—Ö –≤ —Å—Ç—Ä–æ–∫—É."
          ],
          correct: 0,
          isCode: false,
        },
        {
          question: "–ß—Ç–æ –≤–µ—Ä–Ω—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥?",
          code: `[1, 2, 3].find(n => n > 1)`,
          variants: [
            "2",
            "1",
            "[2,3]",
            "undefined"
          ],
          explanations: [
            "find –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–¥ —É—Å–ª–æ–≤–∏–µ (>1) ‚Äî —ç—Ç–æ 2.",
            "1 –Ω–µ –±–æ–ª—å—à–µ 1, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.",
            "find –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç, –∞ –Ω–µ –º–∞—Å—Å–∏–≤.",
            "–≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω, –∑–Ω–∞—á–∏—Ç –Ω–µ undefined."
          ],
          correct: 0,
          isCode: true,
        },
        {
          question: "–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –∏–∑–º–µ–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π?",
          variants: [
            "reverse",
            "sort",
            "map",
            "filter"
          ],
          explanations: [
            "reverse –º–µ–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π (–º—É—Ç–∏—Ä—É–µ—Ç).",
            "sort —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç, –Ω–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.",
            "map —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç, –Ω–æ –Ω–µ –º–µ–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫.",
            "filter –æ—Ç–±–∏—Ä–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–µ –º–µ–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫."
          ],
          correct: 0,
          isCode: false,
        },
        {
          question: "–ß—Ç–æ –±—É–¥–µ—Ç —Å –º–∞—Å—Å–∏–≤–æ–º –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ arr.shift()?",
          variants: [
            "–£–¥–∞–ª—ë–Ω –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞",
            "–£–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞",
            "–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞",
            "–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞"
          ],
          explanations: [
            "shift —É–¥–∞–ª—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞.",
            "pop —É–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, –∞ –Ω–µ shift.",
            "unshift –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –Ω–∞—á–∞–ª–æ, –Ω–µ —É–¥–∞–ª—è–µ—Ç.",
            "push –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ–Ω–µ—Ü, –Ω–µ —É–¥–∞–ª—è–µ—Ç."
          ],
          correct: 0,
          isCode: false,
        },
        {
          question: "–ß—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–æ–¥–∞?",
          code: `['a', 'b', 'a'].indexOf('a') === ['a', 'b', 'a'].lastIndexOf('a')`,
          variants: [
            "false",
            "true",
            "undefined",
            "–û—à–∏–±–∫–∞"
          ],
          explanations: [
            "indexOf('a') –≤–µ—Ä–Ω—ë—Ç 0, lastIndexOf('a') ‚Äî 2, —Ä–∞–∑–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã.",
            "–ò–Ω–¥–µ–∫—Å—ã —Ä–∞–∑–Ω—ã–µ, –∑–Ω–∞—á–∏—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ false.",
            "–í—ã—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–µ undefined.",
            "–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
          ],
          correct: 0,
          isCode: true,
        },
        {
          question: "–ß—Ç–æ –±—É–¥–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ arr –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è?",
          code: `const arr = [1, 2, 3];
arr.length = 2;`,
          variants: [
            "[1, 2]",
            "[1, 2, 3]",
            "[2, 3]",
            "undefined"
          ],
          explanations: [
            "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ length = 2 –æ–±—Ä–µ–∑–∞–µ—Ç –º–∞—Å—Å–∏–≤ –¥–æ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.",
            "–ú–∞—Å—Å–∏–≤ –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å—Ç–∞–ª –∫–æ—Ä–æ—á–µ.",
            "–û–±—Ä–µ–∑–∫–∞ —É–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, –Ω–µ –ø–µ—Ä–≤—ã–µ.",
            "length ‚Äî —Å–≤–æ–π—Å—Ç–≤–æ, –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è."
          ],
          correct: 0,
          isCode: true,
        },
        {
          question: "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–µ—Ç–æ–¥ includes?",
          variants: [
            "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true/false",
            "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞",
            "–£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞",
            "–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞"
          ],
          explanations: [
            "includes –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ.",
            "–î–ª—è –∏–Ω–¥–µ–∫—Å–∞ –µ—Å—Ç—å indexOf.",
            "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è ‚Äî splice –∏–ª–∏ filter.",
            "–î–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è ‚Äî concat."
          ],
          correct: 0,
          isCode: false,
        },
        {
          question: "–ß—Ç–æ –≤–µ—Ä–Ω—ë—Ç —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥?",
          code: `[1, 2, 3].filter(n => n > 1).map(n => n * 2)`,
          variants: [
            "[4, 6]",
            "[2, 4, 6]",
            "[1, 2, 3]",
            "[2, 3, 4]"
          ],
          explanations: [
            "filter –æ—Ç–±–µ—Ä—ë—Ç [2,3], map —É–¥–≤–æ–∏—Ç ‚Äî [4,6].",
            "map –ø—Ä–∏–º–µ–Ω—ë–Ω –Ω–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –º–∞—Å—Å–∏–≤—É, –∞ –∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–º—É.",
            "–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è.",
            "–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ —Å–º–µ—â–∞—é—Ç—Å—è –Ω–∞ 1, –∞ —É–¥–≤–∞–∏–≤–∞—é—Ç—Å—è."
          ],
          correct: 0,
          isCode: true,
        },
        {
          question: "–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥?",
          code: `[1, 2, 3].map(n => { return; })`,
          variants: [
            "[undefined, undefined, undefined]",
            "[1, 2, 3]",
            "[null, null, null]",
            "–û—à–∏–±–∫–∞"
          ],
          explanations: [
            "–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç undefined —è–≤–Ω–æ, map —Å–æ–∑–¥–∞—Å—Ç –º–∞—Å—Å–∏–≤ –∏–∑ undefined.",
            "–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è, –∞ –∑–∞–º–µ–Ω—è—é—Ç—Å—è –Ω–∞ undefined.",
            "null –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –±–µ–∑ —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è.",
            "–ö–æ–¥ –≤–∞–ª–∏–¥–µ–Ω, –æ—à–∏–±–∫–∏ –Ω–µ—Ç."
          ],
          correct: 0,
          isCode: true,
        }
      ]} />
      <NavButtons prev={'/js/MapAndSet'} next={'/js/MapAndSet'} />
    </section>
  )
}
