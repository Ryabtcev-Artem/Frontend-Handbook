import Test from "../../../components/Test/Test.tsx";
import NavButtons from "../../../components/NavButtons/NavButtons.tsx";
import VsCode from "../../../components/VsCode/VsCode.tsx";


export default function Operators() {
  

  return (
    <section className="topic container">
      <h2>Операторы в JavaScript</h2>

      <h3>Что такое оператор</h3>
      <p>
        Оператор — это символ или конструкция, которая выполняет определённую операцию над одним или несколькими значениями (операндами) и возвращает результат.
      </p>
      <p>
        Проще говоря, оператор — инструмент для работы с данными: сложить числа, сравнить значения, присвоить значение переменной и т.п.
      </p>

      <h3>Типы операторов</h3>
      <p>
        В JavaScript операторы делятся по количеству операндов и функциональности:
      </p>
      <ul>
        <li>
          <strong>Унарные</strong> — работают с одним операндом. Например, отрицание <code>!</code>, инкремент <code>++</code>, оператор <code>typeof</code>.
        </li>
        <li>
          <strong>Бинарные</strong> — работают с двумя операндами. Например, арифметические <code>+</code>, <code>-</code>, <code>*</code>, логические <code>&&</code>, <code>||</code>, сравнения <code>==</code>, <code>&lt;</code>.
        </li>
        <li>
          <strong>Тернарный</strong> — единственный оператор с тремя операндами: условный <code>?</code>, записывается как <code>условие ? выражение1 : выражение2</code>.
        </li>
      </ul>

      <h3>Арифметические операторы</h3>
      <p>
        Арифметические операторы выполняют математические действия с числами.
      </p>
      <ul>
        <li><code>+</code> — сложение или конкатенация строк.</li>
        <li><code>-</code> — вычитание.</li>
        <li><code>*</code> — умножение.</li>
        <li><code>/</code> — деление.</li>
        <li><code>%</code> — остаток от деления.</li>
        <li>
          <code>++</code>, <code>--</code> — инкремент и декремент, увеличивают или уменьшают значение на 1.
        </li>
      </ul>
      <p>
        <strong>Разница между <code>++number</code> и <code>number++</code>:</strong><br />
        <code>++number</code> — префиксный инкремент: сначала увеличивает значение переменной, затем возвращает новое значение.<br />
        <code>number++</code> — постфиксный инкремент: возвращает текущее значение переменной, а после увеличивает её.
      </p>
      <p>Пример:</p>
      <VsCode>{`let a = 5;
console.log(++a); // 6 (увеличили и вернули)    
console.log(a++); // 6 (вернули, потом увеличили)
console.log(a);   // 7 (значение после второго инкремента)`}
      </VsCode>

      <h3>Операторы присваивания</h3>
      <p>
        Оператор присваивания <code>=</code> присваивает значение переменной.
      </p>
      <p>
        Также существуют сокращённые операторы присваивания, объединяющие операцию с присваиванием:
      </p>
      <ul>
        <li><code>+=</code> — прибавить и присвоить.</li>
        <li>
          <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code> — аналогично для других арифметических операций.
        </li>
      </ul>

      <h3>Операторы сравнения</h3>
      <p>
        Операторы сравнения возвращают логическое значение <code>true</code> или <code>false</code> в зависимости от результата сравнения.
      </p>
      <ul>
        <li>
          <code>==</code> — нестрогое равенство, с неявным преобразованием типов.
        </li>
        <li><code>===</code> — строгое равенство, без преобразований.</li>
        <li>
          <code>!=</code> и <code>!==</code> — неравенство (соответственно нестрогое и строгое).
        </li>
        <li>
          <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> — сравнения чисел или строк в лексикографическом порядке.
        </li>
      </ul>
      <p>
        Особенность: <code>==</code> преобразует типы перед сравнением, что может приводить к неожиданным результатам.
      </p>

      <h3>Оператор нулевого слияния (<code>??</code>)</h3>
      <p>
        Оператор нулевого слияния возвращает левый операнд, если он не <code>null</code> и не <code>undefined</code>. Иначе — правый операнд.
      </p>
      <p>
        Его используют для задания значений по умолчанию, когда возможны <code>null</code> или <code>undefined</code>.
      </p>
      <p>Пример:</p>
      <VsCode>{`let value = null;
let result = value ?? 'по умолчанию';
console.log(result); // 'по умолчанию'`}

  </VsCode>
      <p>
        Важно: оператор нулевого слияния отличается от логического ИЛИ (<code>||</code>), который проверяет на "ложные" значения (<code>false</code>, <code>0</code>, пустую строку и т.п.), а <code>??</code> проверяет только на <code>null</code> и <code>undefined</code>.
      </p>

      <h3>Логические операторы</h3>
      <p>
        Логические операторы работают с булевыми значениями или приводят значения к логическому типу.
      </p>
      <ul>
        <li>
          <code>&&</code> — логическое И, возвращает первый ложный операнд или последний истинный.
        </li>
        <li>
          <code>||</code> — логическое ИЛИ, возвращает первый истинный операнд или последний ложный.
        </li>
        <li>
          <code>!</code> — логическое НЕ, меняет булевое значение на противоположное.
        </li>
      </ul>
      <p>
        Эти операторы часто используются для управления потоками и проверки условий.
      </p>

      <h3>Тернарный оператор</h3>
      <p>
        Тернарный оператор — это сокращённый способ написать условие. Синтаксис: <code>условие ? выражение1 : выражение2</code>.
      </p>
      <p>
        Если условие истинно, возвращается <code>выражение1</code>, иначе — <code>выражение2</code>.
      </p>
      <p>Пример:</p>
      <VsCode>let result = (age &gt;= 18) ? "Взрослый" : "Ребёнок";</VsCode>

      <h3>Особенности операторов в JavaScript</h3>
      <p>
        JavaScript динамически приводит типы при операциях с операторами. Особенно это заметно с оператором <code>+</code>, который может и складывать числа, и конкатенировать строки.
      </p>
      <p>
        Унарные операторы могут менять типы данных, например, <code>+value</code> пытается преобразовать <code>value</code> к числу.
      </p>
      <p>
        Логические операторы возвращают не всегда булево значение — они возвращают один из операндов согласно правилам логики «короткого замыкания».
      </p>

      <h3>Приоритет и порядок вычислений</h3>
      <p>
        Операторы имеют разные приоритеты — важность при вычислении выражений.
      </p>
      <p>
        Например, умножение имеет более высокий приоритет, чем сложение, поэтому <code>2 + 3 * 4</code> вычисляется как <code>2 + (3 * 4)</code> = 14.
      </p>
      <p>
        Скобки <code>()</code> используются для явного задания порядка вычислений.
      </p>

      <h2>Итого</h2>
      <ul>
        <li>Оператор — это знак или конструкция, которая выполняет операцию над значениями.</li>
        <li>В JavaScript есть унарные, бинарные и тернарный операторы.</li>
        <li>Префиксный <code>++number</code> увеличивает и возвращает новое значение, постфиксный <code>number++</code> — возвращает старое и увеличивает после.
        </li>
        <li>Оператор нулевого слияния <code>??</code> возвращает левый операнд, если он не <code>null</code> и не <code>undefined</code>, иначе правый.
        </li>
        <li>Приоритет операторов влияет на порядок вычислений, скобки меняют этот порядок.</li>
      </ul>
      <NavButtons
        prev={'/js/Transformation'}
        next={'/js/Switch'}
      />
      <Test
        allTasks={[
          {
            question: "Какой оператор используется для строгого сравнения без преобразования типов?",
            variants: ["==", "===", "=", "!=="],
            explanations: [
              "Оператор == выполняет нестрогое сравнение с преобразованием типов",
              "Оператор === выполняет строгое сравнение без преобразования типов",
              "Оператор = используется для присваивания, а не сравнения",
              "Оператор !== это строгое неравенство, а не равенство"
            ],
            correct: 1,
            isCode: true
          },
          {
            question: "Что вернёт выражение?",
            variants: ["10", '"55"', "NaN", "Ошибку"],
            explanations: [
              "Такой результат был бы при сложении чисел, но здесь происходит конкатенация строк",
              "Оператор + преобразует число в строку и объединяет их",
              "NaN возвращается при арифметических операциях с нечисловыми значениями, но здесь работает конкатенация",
              "Это валидное выражение в JavaScript, ошибки не будет"
            ],
            correct: 1,
            isCode: true,
            code: `console.log(5 + "5")`
          },
          {
            question: "Какое значение будет в result?",
            code: `let x = 5;\nlet result = x++ + ++x;`,
            variants: ["13", "10", "12", "11"],
            explanations: [
              "Это было бы верно, если бы оба оператора были бы префиксными",
              "Такое произошло бы, если бы унарных операторов вовсе не было бы",
              "x++ возвращает 5 (затем x становится 6), ++x увеличивает 6 до 7 и возвращает 7. 5 + 7 = 12",
              "Это было бы верно, если бы оба оператора были постфиксными",
            ],
            correct: 2,
            isCode: true
          },
          {
            question: "Что выведет этот код?",
            code: `null ?? 'default'`,
            variants: ["null", "'default'", "undefined", "Ошибку"],
            explanations: [
              "null возвращается только если справа нет значения, но оператор ?? проверяет именно на null/undefined",
              "Оператор нулевого слияния возвращает правый операнд, когда левый null или undefined",
              "undefined было бы если левый операнд был undefined, а здесь null",
              "Это валидное использование оператора нулевого слияния"
            ],
            correct: 1,
            isCode: true
          },
          {
            question: "Какой оператор имеет наивысший приоритет?",
            variants: ["+ (сложение)", "* (умножение)", "! (логическое НЕ)", "== (равенство)"],
            explanations: [
              "Сложение имеет более низкий приоритет, чем умножение и логическое НЕ",
              "Умножение имеет высокий приоритет, но ниже чем у логического НЕ",
              "Логическое НЕ является унарным оператором и имеет наивысший приоритет из перечисленных",
              "Операторы сравнения имеют более низкий приоритет, чем арифметические и логические операторы"
            ],
            correct: 2,
            isCode: false
          },
          {
            question: "Что вернёт выражение?",
            code: "true && 'Hello' || false ? 'World' : '!'",
            variants: ["'Hello'", "'World'", "'!'", "true"],
            explanations: [
              "Сначала выполняется true && 'Hello' → 'Hello', затем 'Hello' || false → 'Hello', поэтому тернарный оператор работает как 'Hello' ? 'World' : '!' → 'World'",
              "Это значение возвращается, потому что тернарный оператор получил истинное условие ('Hello') и выбрал 'World'",
              "Это было бы верно, если бы условие тернарного оператора было ложным",
              "Это просто один из операндов, но он не возвращается в данном выражении"
            ],
            correct: 1,
            isCode: true
          },
          {
            question: "Что выведет этот код?",
            code: `let a = 10;\nlet b = 20;\na &&= b;\nconsole.log(a);`,
            variants: ["10", "20", "true", "false"],
            explanations: [
              "Это было бы верно, если бы a было falsy значением",
              "Оператор &&= присваивает значение правого операнда, если левый - truthy",
              "Логические операторы присваивания возвращают значение, а не булево значение",
              "Оператор не возвращает булево значение, а присваивает значение правого операнда"
            ],
            correct: 1,
            isCode: true
          },
          {
            question: "Какой оператор используется для проверки на неравенство без приведения типов?",
            variants: ["!=", "!==", "==", "=!"],
            explanations: [
              "Оператор != выполняет проверку с приведением типов",
              "Оператор !== выполняет строгую проверку без приведения типов",
              "Оператор == проверяет на равенство с приведением типов",
              "Такого оператора не существует в JavaScript"
            ],
            correct: 1,
            isCode: false
          },
          {
            question: "Что выведет этот код?",
            code: `console.log(0 || "" || 2 || NaN);`,
            variants: ["0", "\"\"", "2", "NaN"],
            explanations: [
              "0 является falsy значением, поэтому оператор || переходит к следующему операнду",
              "Пустая строка также является falsy значением",
              "Оператор || возвращает первое truthy значение, которым является 2",
              "NaN является falsy значением, и до него не дойдет, так как найдено truthy значение"
            ],
            correct: 2,
            isCode: true
          },
          {
            question: "Какой результат выражения?",
            variants: ["0", "1", "4", "NaN"],
            code: '3 ** 2 % 2 ?',
            explanations: [
              "3 ** 2 = 9, 9 % 2 = 1 (остаток от деления), но 1 - это truthy значение, поэтому тернарный оператор вернет первый вариант после ?",
              "3 ** 2 = 9, 9 % 2 = 1 (остаток от деления), 1 - это truthy значение, но здесь нет тернарного оператора, просто вычисление выражения",
              "Это результат возведения в степень, но нужно еще вычислить остаток от деления",
              "Это валидное математическое выражение, результат будет числом"
            ],
            correct: 1,
            isCode: true
          },
          {
            question: "Что делает оператор ?? в JavaScript?",
            variants: [
              "Проверяет на null или undefined",
              "Проверяет на все falsy значения",
              "Возвращает первый truthy операнд",
              "Возвращает первый операнд"
            ],
            explanations: [
              "Оператор нулевого слияния возвращает правый операнд только если левый null или undefined",
              "Оператор || проверяет на falsy значения, а ?? только на null/undefined",
              "Это поведение оператора ||, а не ??",
              "Оператор ?? возвращает правый операнд в определенных случаях"
            ],
            correct: 0,
            isCode: false
          },
          {
            question: "Что выведет этот код?",
            code: `let x = 1;\nlet y = 2;\n[x, y] = [y, x];\nconsole.log(x, y);`,
            variants: ["1 2", "2 1", "[2, 1]", "Ошибку"],
            explanations: [
              "Это были бы исходные значения без деструктуризации",
              "Деструктуризация позволяет поменять значения переменных местами",
              "Деструктуризация присваивает значения переменным, а не создает массив",
              "Это валидный синтаксис деструктуризации в JavaScript"
            ],
            correct: 1,
            isCode: true
          },
          {
            question: "Какой оператор имеет самый низкий приоритет?",
            variants: ["=", "&&", "||", ","],
            explanations: [
              "Оператор присваивания имеет низкий приоритет, но не самый низкий",
              "Логическое И имеет более высокий приоритет, чем ИЛИ и присваивание",
              "Логическое ИЛИ имеет более высокий приоритет, чем запятая",
              "Оператор запятой имеет самый низкий приоритет из перечисленных"
            ],
            correct: 3,
            isCode: false
          }
        ]}
      />
      <NavButtons
        prev={'/js/Transformation'}
        next={'/js/Switch'}
      />
    </section>
  )
}