import Test from "../../../components/Test/Test.tsx";
import NavButtons from "../../../components/NavButtons/NavButtons.tsx";


export default function Variables() {
  

  return (
    <section className={'topic container'}>
      <h2>Переменные let, const и var</h2>

      <p>
        <strong>Переменная</strong> — именованное хранилище данных, значение которого может быть изменено или неизменно в ходе выполнения программы.
      </p>

      <h3>let</h3>
      <p>
        <strong>let</strong> — ключевое слово для объявления переменной с блочной областью видимости, значение которой можно изменять.
      </p>
      <p>Переменная, объявленная через <code>let</code>, существует только внутри ближайших фигурных скобок (блока). Это предотвращает случайное использование переменной вне нужного контекста и повышает безопасность кода.
      </p>

      <h3>const</h3>
      <p>
        <strong>const</strong> — ключевое слово для объявления переменной с блочной областью видимости, значение которой нельзя изменить после присвоения.
      </p>
      <p>Используется для создания констант. При этом если константа содержит объект или массив, структура данных может изменяться, но сама ссылка остаётся неизменной.</p>

      <h3>var</h3>
      <p>
        <strong>var</strong> — устаревший способ объявления переменных с функциональной областью видимости.
      </p>
      <p>Переменные, объявленные через <code>var</code>, доступны во всей функции, в которой они были объявлены, а не в блоке, и подвергаются <em>hoisting</em> — поднятию объявления вверх функции, что может привести к непредвиденным ошибкам.
      </p>

      <h3>Итого</h3>
      <ul>
        <li>
          <code>let</code> — переменная с блочной областью видимости, значение можно менять.
        </li>
        <li>
          <code>const</code> — неизменяемая переменная с блочной областью видимости.
        </li>
        <li>
          <code>var</code> — переменная с функциональной областью видимости, устаревшая, подвержена hoisting.
        </li>
        <li>Рекомендуется использовать <code>let</code> и <code>const</code> для современного, безопасного и понятного кода.
        </li>
      </ul>
      <NavButtons prev={'/js/Intro'} next={'/js/Hoisting'} />
      <Test
        allTasks={[
          {
            question: 'Какие переменные можно переназначать после их объявления?',
            variants: ['const и let', 'let и var', 'const и var'],
            explanations: [
              'Переменные, объявленные через const, нельзя переназначить — будет ошибка.',
              'let и var позволяют переназначать переменную после создания.',
              'const запрещает повторное присваивание, а var — разрешает, поэтому вместе они не подойдут.'
            ],
            correct: 1,
            isCode: false
          },
          {
            question: 'Какой из примеров вызовет ошибку при выполнении?',
            variants: [
              `let num = 5;\nnum = 10;`,
              `const name = "Victor";\nname = "Denis";`,
              `var isActive = false;\nisActive = "Hello!";`
            ],
            explanations: [
              'Переменные с let можно изменять — это безопасный и правильный код.',
              'Переменные с const нельзя переназначать — будет ошибка на второй строке.',
              'var не ограничивает тип значения — строка вместо boolean допустима.'
            ],
            correct: 1,
            isCode: true
          },
          {
            question: 'Что произойдёт при изменении содержимого массива, объявленного через const?',
            variants: [
              'Произойдёт ошибка: содержимое const-массива нельзя менять',
              'Массив изменится — менять можно, но нельзя переназначить весь массив',
              'Можно и менять содержимое, и присвоить новый массив'
            ],
            explanations: [
              'Содержимое массива через const менять можно — ошибка не произойдёт.',
              'const защищает только саму ссылку, но не содержимое.',
              'Переназначить переменную, объявленную через const, нельзя — будет ошибка.'
            ],
            correct: 1,
            isCode: false
          },
          {
            question: 'Что выведется?',
            variants: [
              '10\n5',
              '10\n10',
              'ReferenceError'
            ],
            explanations: [
              'let создаёт новую переменную внутри блока. Внешняя x остаётся прежней.',
              'Это случилось бы, если бы обе переменные были объявлены через var.',
              'let работает нормально — ошибок нет, просто область ограничена.'
            ],
            correct: 0,
            isCode: true,
            code: `let x = 5;
if (true) {
  let x = 10;
  console.log(x);
}
console.log(x);
`
          },
          {
            question: 'Что произойдёт?',
            variants: [
              'Выведется 42',
              'ReferenceError',
              'undefined'
            ],
            explanations: [
              'const тоже блочная — переменная value не видна за пределами блока.',
              'value определена только внутри блока. Вне его — она не существует.',
              'undefined будет только при var, тут const — будет ошибка.'
            ],
            correct: 1,
            isCode: true,
            code: `if (true) {
  const value = 42;
}
console.log(value);
`
          }
        ]}
      />
      <NavButtons prev={'/js/Intro'} next={'/js/Hoisting'} />
    </section>
  )
}
