import NavButtons from "../../../components/NavButtons/NavButtons.tsx";


export default function Connection() {
  

  return (
    <section className={'topic container'}>
      <h2>Как CSS подключается к HTML?</h2>

      <p>CSS можно подключить к HTML-разметке тремя способами. Каждый из них имеет свои особенности и применимость.</p>

      <h4>1. Внешний файл (External CSS)</h4>
      <p>Это самый популярный и удобный способ — стили пишутся в отдельном файле с расширением <code>.css</code>, а в HTML подключаются с помощью тега <code>&lt;link&gt;</code> в секции <code>&lt;head&gt;</code>.
      </p>
      <p>Пример подключения:</p>
      <pre>&lt;head&gt;
        &lt;link rel="stylesheet" href="styles.css"&gt;
        &lt;/head&gt;
</pre>
      <p><strong>Особенности:</strong></p>
      <ul>
        <li>Стили централизованы в одном месте — легко управлять.</li>
        <li>Файл кешируется браузером — страницы грузятся быстрее при повторных заходах.</li>
        <li>Можно подключать один файл к нескольким страницам.</li>
      </ul>

      <h4>2. Встроенный стиль (Internal CSS)</h4>
      <p>Стили пишутся прямо внутри HTML-документа в теге <code>&lt;style&gt;</code>, который тоже располагается в <code>&lt;head&gt;</code>.
      </p>
      <p>Пример:</p>
      <pre>
  {`<head>
  <style>
    body { background-color: #f0f0f0; }
    h1 { color: blue; }
  </style>
</head>`}
</pre>

      <p><strong>Особенности:</strong></p>
      <ul>
        <li>Удобно для небольших проектов или отдельных страниц.</li>
        <li>Все стили находятся в одном файле вместе с HTML — удобно для быстрого редактирования.</li>
        <li>Но если таких страниц много, поддерживать стили сложно, и код будет дублироваться.</li>
      </ul>

      <h4>3. Inline-стили (Inline CSS)</h4>
      <p>Стили пишутся прямо в атрибуте <code>style</code> внутри HTML-тега.</p>
      <p>Пример:</p>
      <pre><code>&lt;h1 style="color: red; font-size: 24px;"&gt;Заголовок&lt;/h1&gt;
</code></pre>
      <p><strong>Особенности:</strong></p>
      <ul>
        <li>Используется для быстрого и локального изменения стиля одного элемента.</li>
        <li>Очень плохо подходит для больших проектов — стили сложно искать и менять.</li>
        <li>Имеет самый высокий приоритет среди CSS-правил (inline-стиль всегда "побеждает").</li>
      </ul>

      <h3>Какой способ лучше?</h3>
      <p>Для современных сайтов и приложений рекомендуют использовать <strong>внешние CSS-файлы</strong>. Они обеспечивают:
      </p>
      <ul>
        <li>Чистоту и разделение кода: HTML отвечает за структуру, CSS — за стиль.</li>
        <li>Удобство поддержки и масштабирования.</li>
        <li>Кэширование браузера, что ускоряет загрузку сайта.</li>
      </ul>

      <p>Встроенные стили (<code>&lt;style&gt;</code>) подходят для простых страниц или когда нужно быстро протестировать небольшой стиль.
      </p>

      <p>Inline-стили полезны только для быстрого локального исправления или динамических изменений через JavaScript, но для основной стилизации их использовать не стоит.</p>
      <h3>А как же CSS-in-JS?</h3>
      <p>CSS-in-JS — это подход, при котором стили пишутся прямо внутри JavaScript-кода. То есть, вместо обычного CSS-файла вы описываете стили как JavaScript-объекты или шаблонные строки, прямо в компонентах React или другого фреймворка.</p>

      <h4>Пример:</h4>
      <pre><code>{`const buttonStyle = {
  backgroundColor: 'blue',
  color: 'white',
  padding: '10px',
};
`}</code></pre>
      <p>Или с библиотекой вроде <code>styled-components</code>:</p>
      <pre><code>{`const Button = styled.button\`
  background-color: blue;
  color: white;
  padding: 10px;
\`;
`}</code></pre>

      <h4>Зачем так делают?</h4>
      <ul>
        <li>Можно привязывать стили прямо к логике компонента.</li>
        <li>Есть поддержка тем, переменных, и условий на JavaScript — удобно для сложных интерфейсов.</li>
        <li>Все стили "в одном месте" вместе с компонентом.</li>
      </ul>

      <h4>А в чём минусы?</h4>
      <ul>
        <li>Производительность — стили генерируются на лету, а это добавляет нагрузку.</li>
        <li>Труднее читать и дебажить в DevTools — не сразу понятно, откуда взялась конкретная стилизация.</li>
        <li>Уход от разделения обязанностей: HTML за структуру, CSS за стиль, JS за поведение. Тут всё намешано.</li>
      </ul>

      <p>
        <strong>CSS-in-JS</strong> — не «ужас-ужас», но точно <em>не серебряная пуля</em>.
      </p>
      <h2>Итого</h2>
      <ul>
        <li><strong>Внешний CSS-файл</strong> — основной и лучший способ. Чисто, быстро, удобно для больших проектов. Подключается через <code>&lt;link&gt;</code>.</li>
        <li><strong>Встроенные стили</strong> (<code>&lt;style&gt;</code> в <code>&lt;head&gt;</code>) — годится для тестов и простых страниц, но неудобно для масштабных проектов.</li>
        <li><strong>Inline-стили</strong> — прямо в теге через <code>style="..."</code>. Используются только для мелких правок или динамических стилей. Самый высокий приоритет, но плохо читаются и поддерживаются.</li>
        <li><strong>CSS-in-JS</strong> — стили прямо в JavaScript. Когда-то был модным, но сейчас — нишевое решение. Подходит для специфических задач, но проигрывает в скорости, читаемости и простоте поддержки.</li>
      </ul>
      <NavButtons prev={'/Css/Intro'} next={'/Css/FlexAndGrid'} />
    </section>
  )
}