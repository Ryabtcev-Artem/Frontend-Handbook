import VsCode from "../../../components/VsCode/VsCode.tsx";
export default function GitlabCICD() {


  return (
    <section className="topic container">
      <h2>Что такое GitLab, CI и CD</h2>

      <p>
        <strong>GitLab</strong> — это платформа для управления исходным кодом и DevOps процессов, которая объединяет в себе:
      </p>
      <ul>
        <li>репозитории Git для хранения и совместной работы над кодом,</li>
        <li>инструменты для планирования задач и отслеживания багов,</li>
        <li>встроенную систему <strong>CI/CD</strong> для автоматизации сборки, тестирования и деплоя приложений.</li>
      </ul>

      <h3>Что такое CI (Continuous Integration — непрерывная интеграция)</h3>
      <p>
        CI — это практика, когда каждый разработчик регулярно сливает свои изменения в общую ветку (например, <code>main</code> или <code>master</code>). После каждого слияния автоматически запускаются сборки и тесты, чтобы убедиться, что код работает и не ломает проект.
      </p>
      <p>
        Это позволяет быстро находить и исправлять ошибки, а также поддерживать стабильную и рабочую версию проекта.
      </p>

      <h3>Что такое CD (Continuous Delivery / Continuous Deployment — непрерывная доставка / непрерывный деплой)</h3>
      <p>
        CD расширяет CI и отвечает за автоматическую доставку кода в разные среды:
      </p>
      <ul>
        <li>
          <strong>Continuous Delivery</strong> — код автоматически подготавливается и тестируется для выпуска, но финальный шаг — деплой — выполняется вручную.
        </li>
        <li>
          <strong>Continuous Deployment</strong> — деплой происходит полностью автоматически после успешного прохождения тестов.
        </li>
      </ul>
      <p>
        Это позволяет быстрее выпускать новые функции и исправления, снижая риски и ошибки, связанные с ручными действиями.
      </p>

      <h3>Как это выглядит на практике в GitLab</h3>
      <p>
        В GitLab для настройки CI/CD используется специальный файл <code>.gitlab-ci.yml</code> в корне проекта. В нём описываются этапы (stages) — например, сборка, тесты, деплой — и задачи (jobs), которые запускаются автоматически при пуше кода.
      </p>
      <p>
        Например, если у вас React-фронтенд и Node.js-бэкенд, то можно настроить:
      </p>

      <VsCode>{`stages:
  - build
  - test
  - deploy

build-frontend:
  stage: build
  script:
    - cd frontend
    - npm install
    - npm run build

test-backend:
  stage: test
  script:
    - cd backend
    - npm install
    - npm test

deploy:
  stage: deploy
  script:
    - ./deploy.sh
  when: manual`}</VsCode>

      <p>
        Это значит, что при каждом пуше в репозиторий автоматически запустятся сборка фронтенда, тесты бэкенда, а деплой можно выполнить вручную.
      </p>

      <h3>Почему это важно даже для фронтенд-разработчика?</h3>
      <ul>
        <li>Автоматизация CI/CD ускоряет процесс разработки и уменьшает количество ошибок.</li>
        <li>Вы всегда уверены, что ваша версия кода работает и готова к релизу.</li>
        <li>Это позволяет легче сотрудничать с командой и быстро интегрировать изменения.</li>
      </ul>

      <p>
        Даже если вы не планируете быть девопсом, базовое понимание GitLab и CI/CD поможет вам эффективнее работать в команде и понимать, как устроен современный процесс разработки.
      </p>
    </section>
  )
}
