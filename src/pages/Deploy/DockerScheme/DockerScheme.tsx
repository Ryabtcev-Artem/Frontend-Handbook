import diagram from '../../../images/Deploy/DockerScheme/diagram.png'



export default function DockerScheme() {
  

  return (
    <section className="topic container">
      <h2>Как работает Docker?</h2>

      <p>
        Возможно, сейчас Docker вам кажется магией: вы пишете простой файл-инструкцию, и вдруг — ваше приложение можно запустить где угодно. Но под капотом есть конкретная механика.
      </p>

      <h3>1. Dockerfile — это как рецепт</h3>
      <p>
        Всё начинается с файла <code>Dockerfile</code>. В нём вы по шагам описываете, что должно быть в вашем окружении:
      </p>
      <ul>
        <li>какая базовая система (чаще всего это Linux-дистрибутив),</li>
        <li>что установить (например, Node.js),</li>
        <li>куда положить ваш код,</li>
        <li>какую команду запускать (<code>npm start</code>, например).</li>
      </ul>

      <h3>2. Образ — как слепок окружения</h3>
      <p>
        Команда <code>docker build</code> собирает из Dockerfile <strong>образ</strong> — готовый архив вашей среды. Он включает в себя всё нужное: библиотеки, зависимости, систему и ваши команды.
      </p>

      <h3>3. Контейнер — как мини-компьютер</h3>
      <p>
        Когда вы запускаете команду <code>docker run</code>, из образа создаётся <strong>контейнер</strong>. Это как изолированный процесс, который работает «внутри» вашей системы, но как будто в отдельном мире.
      </p>
      <p>
        В одном контейнере может быть Node.js 18, в другом — Python 3.12, и они не мешают друг другу.
      </p>

      <h3>Чем отличается образ от контейнера?</h3>
      <p>
        Эти понятия часто путают, поэтому вот простое объяснение:
      </p>
      <ul>
        <li>
          <strong>Образ (Image)</strong> — это как <em>заготовка</em>, инструкция или «замороженное» состояние приложения. Он неизменен и просто лежит как шаблон.
        </li>
        <li>
          <strong>Контейнер (Container)</strong> — это <em>запущенный образ</em>. Он «оживает» и начинает выполнять команды. Вы можете запускать много контейнеров из одного и того же образа.
        </li>
      </ul>
      <p>
        Аналогия: образ — это как класс в программировании, а контейнер — это объект, созданный по этому классу.
      </p>

      <h3>Но ведь Docker не волшебство</h3>
      <p>
        По факту, Docker <strong>использует возможности ядра Linux</strong> — namespaces и cgroups — чтобы изолировать процессы. Это не полноценная виртуальная машина, но <strong>всё равно требует некоторого уровня виртуализации</strong>.
      </p>
      <p>
        На Windows или macOS Docker работает <strong>через лёгкую виртуальную машину</strong>, внутри которой запущен Linux. Именно поэтому:
      </p>
      <ul>
        <li>контейнеры не запускаются «нативно» на Windows/macOS,</li>
        <li>на сервере почти всегда используют <strong>Linux</strong>, чтобы Docker работал напрямую, без лишней прослойки,</li>
        <li>всё равно тратятся ресурсы, хоть и гораздо меньше, чем у полной виртуальной машины.</li>
      </ul>

      <h3>4. Почему это удобно?</h3>
      <ul>
        <li>Один образ → работает везде одинаково.</li>
        <li>Контейнеры стартуют за секунды, не занимают гигабайты, как виртуалки.</li>
        <li>Можно запускать сразу много копий приложения на одном сервере.</li>
      </ul>
      <h3>Схема работы Docker</h3>
      <p>
        Чтобы всё это работало, у Docker есть понятная архитектура. Давайте разберёмся шаг за шагом.
      </p>
      <figure>
        <img
          src={diagram}
          alt="Docker схема"
          loading="lazy"
        />
        <figcaption>Схема работы Docker</figcaption>
      </figure>
      <h4>1. Клиент — это вы</h4>
      <p>
        Вы как разработчик — это <strong>Docker Client</strong>. Вы пишете команды вроде <code>docker build</code>, <code>docker run</code> или <code>docker pull</code>. Эти команды отправляются в специальный фоновый процесс, который всё и выполняет.
      </p>

      <h4>2. Docker Host и Docker Daemon</h4>
      <p>
        <strong>Docker Host</strong> — это машина, на которой установлен Docker. Это может быть ваш компьютер или сервер в облаке. А внутри него работает <strong>Docker Daemon</strong> (процесс <code>dockerd</code>), который:
      </p>
      <ul>
        <li>принимает команды от клиента,</li>
        <li>строит образы,</li>
        <li>запускает контейнеры,</li>
        <li>общается с реестром (registry).</li>
      </ul>
      <p>
        Клиент и демон могут быть на одной машине, а могут быть на разных. Например, вы на ноутбуке пишете команду, а она уходит на удалённый сервер.
      </p>

      <h4>3. Registry (реестр)</h4>
      <p>
        Это как хранилище Docker-образов. Самый известный — <strong>Docker Hub</strong>. Когда вы пишете <code>docker pull node</code>, Docker Daemon скачивает образ <strong>Node.js</strong> из реестра. А если вы собираете свой образ — его можно залить туда командой <code>docker push</code>, чтобы другие могли его использовать.
      </p>

      <h4>4. Images (образы)</h4>
      <p>
        Образ — это шаблон. Он неизменен и содержит всё, что нужно для запуска приложения: от системы до кода. Вы можете скачивать образы из реестра или собирать свои.
      </p>

      <h4>5. Containers (контейнеры)</h4>
      <p>
        Контейнер — это <strong>живой экземпляр</strong> образа. Он запускается на Docker Host и работает изолированно. Если образ — это рецепт, то контейнер — это уже приготовленное блюдо.
      </p>
      <p>
        Вы можете запускать много контейнеров из одного образа. Например, несколько версий вашего приложения для тестирования.
      </p>

      <p><strong>Итог:</strong> вы как клиент отдаёте команды, Docker Daemon выполняет их, образы хранятся в реестре, а на их основе запускаются контейнеры. Всё изолировано, быстро и воспроизводимо.</p>

      <h3>Итого</h3>
      <p>
        Docker позволяет упаковать ваше приложение и всё его окружение в один образ, из которого можно легко запускать контейнеры на любой системе. Это делает разработку, тестирование и деплой гораздо проще, надёжнее и быстрее. Особенно в команде.
      </p>


    </section>
  )
}
