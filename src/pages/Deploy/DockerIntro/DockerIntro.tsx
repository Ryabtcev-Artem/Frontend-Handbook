import VsCode from "../../../components/VsCode/VsCode.tsx";
import virtual from '../../../images/Deploy/DockerIntro/virtual.jpeg'
import NavButtons from "../../../components/NavButtons/NavButtons.tsx";


export default function DockerIntro() {
  

  return (
    <section className="topic container">
      <h2>Что такое Docker и зачем он нужен?</h2>

      <p>
        Представьте: вы написали приложение. Например, сайт на React. У вас всё работает — вы настроили окружение, выбрали нужные версии, подключили нужные библиотеки. Теперь хотите отправить его коллеге. Но у него — Windows, а у вас macOS. Или у него более старая версия операционной системы.
      </p>
      <p>
        Всё ломается, и не всегда понятно где. Почему? Дело в том, что ваше приложение зависит от окружения: какие установлены программы, версии, системные переменные, как настроена система. Если у кого-то хоть что-то отличается — поведение может быть совсем другим.
      </p>
      <h3>Что же делать?</h3>
      <p>
        Чтобы приложение точно заработало, нужно воспроизвести вашу среду: установить все нужные зависимости, библиотеки, версии Node, настройки окружения и даже операционную систему. Казалось бы — почти невозможно.
      </p>
      <p>
        Но такое решение уже давно существует — <strong>виртуальные машины</strong>.
      </p>

      <h3>Что такое виртуальная машина?</h3>
      <p>
        Виртуальная машина (VM) — это полноценный «компьютер внутри компьютера». Она запускается внутри вашей системы, но работает как отдельный сервер. У неё есть своя операционная система, память, диски и программы. Всё изолировано.
      </p>
      <p>
        Пример: на вашем Windows можно запустить виртуальную машину с Linux и разворачивать приложение так, как если бы вы работали на настоящем сервере.
      </p>
      <img
        src={virtual}
        alt=""
        width=""
        height=""
        loading="lazy"
      />
      <p>Допустим, вы решили использовать виртуальную машину, чтобы ваш коллега тоже мог собрать и запустить ваше приложение. Вы настраиваете в ней всё нужное: систему, Node.js, библиотеки — и упаковываете в виде <strong>образа</strong> (готовой копии виртуальной машины). Теперь нужно:
      </p>
      <ul>
        <li>передать этот большой файл коллеге (а он может весить десятки гигабайт),</li>
        <li>убедиться, что у него установлен гипервизор (например, VirtualBox), для запуска виртуального компьютера,</li>
        <li>запустить у него этот образ.</li>
      </ul>
      <p>
        Технически — он сможет собрать и запустить ваше приложение. Но на практике это долго, сложно и требует мощного компьютера. Неудобно. Особенно если нужно сделать это много раз или на многих устройствах.
      </p>

      <p> Именно поэтому появился Docker — более лёгкий, быстрый и удобный способ запускать приложения с предсказуемым окружением, но без полноценной виртуальной машины.</p>


      <h3>Docker — что отличает его от виртуальной машины</h3>
      <p>
        Docker — это программа, которая позволяет создавать и управлять контейнерами. Каждый контейнер — это как изолированная коробка, внутри которой лежит ваше приложение и всё, что ему нужно: операционная система, зависимости, порты, команды запуска.
      </p>
      <p>Благодаря Докеру мы можем быть уверены что наше приложение будет 100% работать.</p>
      <p>
        Главное отличие от обычной виртуальной машины — контейнеры лёгкие и быстрые. Они не запускают целую систему, а используют ресурсы основной ОС, но так, что каждый контейнер не мешает другим.
      </p>
      <p> Проще говоря, если виртуальная машина — это целый дом с отдельными коммуникациями, то Docker — это отдельная комната в большом доме, где все соседи пользуются общими коммуникациями, но не мешают друг другу.</p>

      <h3>Что такое Docker-контейнер?</h3>
      <p>
        Контейнер — это изолированная среда, то есть программа, находящаяся в одном контейнере вообще не понимает что существует какая то другая программа в другом контейнере. Внутри этого контейнера — всё нужное: библиотеки, система, команды запуска. Снаружи — только то, что вы явно разрешите.
      </p>
      <p>
        Пример: можно создать контейнер, в котором Node.js 18, React-приложение и команда <code>npm start</code>. И при запуске контейнер будет вести себя так, будто он живёт в своём мире с нужными версиями всего.
      </p>
      <p> Но подождите, а как это всё работает? Как Docker позволяет запускать контейнеры на любой операционной системе — Windows, macOS или Linux — без проблем с совместимостью?</p>
      <p> Всё дело в том, что Docker использует возможности ядра операционной системы и изолирует процессы на уровне операционной системы, а не виртуализирует её целиком. Поэтому контейнеры очень лёгкие — их размер обычно измеряется в мегабайтах, а не в гигабайтах, как у виртуальных машин. Это позволяет быстро запускать и масштабировать приложения без лишних затрат ресурсов.</p>
      <h3>Что такое Docker-образ (image)?</h3>
      <p>
        Контейнеры создаются из образов. Образ — это как чертёж или слепок. Вы создаёте его один раз — и можете запускать сколько угодно копий.
      </p>
      <p>
        В образ записывается:
      </p>
      <ul>
        <li>какую систему использовать (например, Ubuntu),</li>
        <li>что установить (Node.js, зависимости),</li>
        <li>какую команду запускать (например, <code>npm run build</code>).</li>
      </ul>

      <h3>Как создать образ?</h3>
      <p>
        Чтобы собрать образ, пишут специальный файл — <strong>Dockerfile</strong>. В нём по шагам описано, что нужно сделать.
      </p>

      <h3>Пример простого Dockerfile для React</h3>
      <VsCode>
        {`# Используем готовый образ с Node.js
FROM node:18

# Указываем рабочую папку внутри контейнера
WORKDIR /app

# Копируем package.json и устанавливаем зависимости
COPY package*.json ./
RUN npm install

# Копируем весь проект
COPY . .

# Собираем проект
RUN npm run build

# Команда запуска
CMD ["npx", "serve", "build"]
`}
      </VsCode>

      <p>
        Такой образ можно собрать и запустить в любой системе, и он всегда поведёт себя одинаково.
      </p>
      <h3>
        Чем Docker отличается от установки на сервер?
      </h3>
      <p>
        Когда вы устанавливаете всё вручную на сервер — например, на виртуальную машину или выделенный хостинг, — вы зависите от конкретной операционной системы, версий программ и настроек сервера. Если что-то поменяется — может сломаться весь проект. Это часто приводит к багам и долгому поиску проблем.
      </p>
      <p>
        В отличие от этого, Docker упаковывает приложение вместе со всеми нужными зависимостями и настройками в единый контейнер. Такой контейнер можно запускать на любой машине с установленным Docker — и приложение всегда будет вести себя одинаково.
      </p>
      <h3>Зачем это фронтенд-разработчику?</h3>
      <p>
        Даже если вы не настраиваете сервера и не деплоите вручную, вас может это коснуться:
      </p>
      <ul>
        <li>У вас могут быть <strong>разные версии Node.js</strong> в проектах — Docker позволяет переключаться между ними без конфликтов.
        </li>
        <li>Вы можете <strong>делать сборку приложения</strong> в контейнере — это быстрее и ближе к "боевому" окружению.
        </li>
        <li>Вам могут <strong>отдавать backend в контейнере</strong>, и вам нужно его просто запустить.
        </li>
        <li>Вы хотите <strong>настроить продакшн</strong> — и сделать это один раз, без "а у меня не работает".
        </li>
      </ul>
      <h2>Итого</h2>
      <ul>
        <li>Docker — это способ упаковать ваше приложение с окружением в один контейнер.</li>
        <li>Контейнер запускается одинаково на любом сервере или машине.</li>
        <li>Это помогает избежать ошибок, конфликтов зависимостей и "магических багов".</li>
        <li>Docker полезен даже фронтенд-разработчику: для сборки, запуска, тестирования, работы с backend'ом.</li>
        <li>Для этого нужен Dockerfile — в нём вы описываете, как собрать и запустить приложение.</li>
      </ul>
      <NavButtons prev={'/deploy/'} next={'/deploy/DockerScheme'} />
    </section>
  )
}
