import {useEffect, useState} from "react";
import Editor from "@monaco-editor/react";
import './JsPlayground.scss'
import VsCode from "../VsCode/VsCode.tsx";

type JsPlaygroundProps = {
  defaultCode: string,
  title: string,
  description: string,
  answers: unknown[][],
  functionName: string,
  examples: string[],
  taskId: number,
  delay?: number,
}
export default function JsPlayground(props:JsPlaygroundProps) {
  const {
    taskId,
    examples,
    defaultCode,
    title,
    description,
    answers,
    functionName,
    delay,
  } = props
  const [code, setCode] = useState(defaultCode);
  const [isResetOverlay, setIsResetOverlay] = useState(false)
  const [output, setOutput] = useState<string[]>([]);
  const currentTheme = localStorage.getItem('user-theme')
  const html = document.documentElement
  const resetCode = () => {
    const logs: string[] = [];
    setCode(defaultCode)
    setOutput(logs);
  }
  useEffect(() => {
    const savedCode = localStorage.getItem(`taskCode${taskId}`)
    if (savedCode) {
      setCode(savedCode)
    }
  }, [taskId]);
  const saveCodeById = (value: unknown) => {
    if (typeof value === 'string'){
      localStorage.setItem(`taskCode${taskId}`, value)
    }
  }
  const runCode = async () => {
    const logs: string[] = [];
    const originalLog = console.log;
    console.log = (...args: unknown[]) => {
      logs.push(args.map(String).join(" "));
    };
    try {
      eval(code);
      if (delay) {
        await new Promise(resolve => setTimeout(resolve, delay))
      }
    } catch (err) {
      logs.push('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞:');
      logs.push(String(err));
    }
    console.log = originalLog;
    console.log(originalLog)
    setOutput(logs);
  }
  const checkCode = async () => {
    const logs: string[] = [];
    const originalLog = console.log;
    console.log = (...args: unknown[]) => {
      logs.push(args.map(String).join(" "));
    };
    let codeWithFunction = ''
    for (let i = 0; i < examples.length; i++) {
      codeWithFunction = `${code}\n${examples[i]}`
      try {
        if (delay) {
          await new Promise(resolve => setTimeout(resolve, delay))
        }
        const result = eval(codeWithFunction)
        if (JSON.stringify(answers[i]) !== JSON.stringify(result)) {
          logs.push('‚ùå –í–∞—à –∫–æ–¥ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É')
          logs.push(`input: ${examples[i]}`)
          logs.push(`your output: ${JSON.stringify(result)}`)
          break
        }
        if (i === examples.length - 1) {
          logs.push('‚úÖ –£—Ä–∞, –≤–∞—à –∫–æ–¥ –ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏! üéâü•≥üöÄ');
          logs.push('üí° –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π JS-–Ω–∏–Ω–¥–∑—è! üß†üòé');
        }
      } catch (err) {
        logs.push('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞:');
        logs.push(String(err));
      }
    }
    console.log = originalLog;
    console.log(originalLog)
    setOutput(logs);
  }

  return (
    <>
      {isResetOverlay && (<div className={'reset-overlay'}>
        <div className={'reset-overlay__content'}>
          <h3>–¢–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–¥?</h3>
          <div className="reset-overlay__buttons">
            <button
              className={'reset-overlay__yes'}
              type="button"
              onClick={() => {
                html.classList.remove('stop-scroll')
                setIsResetOverlay(false)
                resetCode()
              }}
            >
              –î–∞
            </button>
            <button
              className={'reset-overlay__no'}
              type="button"
              onClick={() => {
                html.classList.remove('stop-scroll')
                setIsResetOverlay(false)
              }
              }
            >
              –ù–µ—Ç
            </button>
          </div>
        </div>
      </div>)}
      <h3>{title}</h3>
      <p>{description}</p>
      <h4>–£—Å–ª–æ–≤–∏—è</h4>
      <ul>
        <li>–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π —Å –ø–æ–º–æ—â—å—é return</li>
        <li>–ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ {functionName}</li>
      </ul>
      <p>–ü—Ä–∏–º–µ—Ä—ã –≤—Ö–æ–¥–Ω—ã—Ö –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:</p>
      <div
        className={'js-playground__examples'}
      >
        {examples.map((example, index) => {
          return (
            <VsCode key={index}>{example}</VsCode>
          )
        })}
      </div>
      <div className={'js-playground'}>
        <Editor
          className={'js-playground__editor'}
          height="300px"
          defaultLanguage="javascript"
          theme={currentTheme === 'dark' ? 'vs-dark' : 'vs'}
          value={code}
          onChange={(value) => {
            saveCodeById(value)
            setCode(value || "")
          }}
          options={{
            quickSuggestions: false,
            tabSize: 2,
            insertSpaces: true,
            minimap: {enabled: false},
            glyphMargin: false,
            lineDecorationsWidth: 0,
            lineNumbersMinChars: 2,
            fontSize: 14,
          }}
        />
        <div className="js-playground__buttons">
          <button
            className={'js-playground__check'}
            onClick={checkCode}
          >
            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
          </button>
          <button
            className={'js-playground__run'}
            type="button"
            onClick={runCode}
          >
            –ó–∞–ø—É—Å—Ç–∏—Ç—å
          </button>
          <button
            className={'js-playground__reset'}
            type="button"
            onClick={() => {
              html.classList.add('stop-scroll')
              setIsResetOverlay(true)
            }}
          >
            –°–±—Ä–æ—Å–∏—Ç—å ‚Üª
          </button>
        </div>
        <div
          className={'js-playground__output'}
        >
          {output.length === 0
            ? "// –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–≤–æ–¥"
            : output.map((line, i) => <div key={i}>{line}</div>)}
        </div>
      </div>
    </>
  );
}
